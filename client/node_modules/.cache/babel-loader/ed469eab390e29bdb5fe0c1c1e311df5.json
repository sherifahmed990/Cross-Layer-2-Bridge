{"ast":null,"code":"var _jsxFileName = \"/home/sherif/code/crypto/bridge/react/client/src/components/SourceRollupBountyPanel.js\";\nimport React from \"react\";\nimport Tickets from \"./Tickets\";\nimport { getEthereum } from \"../getEthereum\";\nimport { getWeb3 } from \"../getWeb3\";\nimport { getContract } from \"../getContract\";\n\nconst SourceRollupBountyPanel = () => {\n  let createTicket = async e => {\n    const ethereum = await getEthereum();\n    let ssbridge = await getContract();\n    const web3 = await getWeb3();\n    var gasPrice = await web3.eth.getGasPrice();\n    const accounts = await ethereum.request({\n      method: 'eth_requestAccounts'\n    });\n    let encodedABI = ssbridge.methods.createTicket().encodeABI();\n    var tx = {\n      from: accounts[0],\n      to: \"0xD904b21D46603e2B6C606f401C412fE413DcAB74\",\n      data: encodedABI //gasPrice: gasPrice\n\n    }; //var gasLimit = 12000;\n    //var transactionFee = gasPrice * gasLimit; // calculate the transaction fee\n    //tx.gas = String(gasLimit);\n    //tx.value = String(transactionFee); // set the transaction value to the entire balance, less the transaction fee\n\n    console.log(`Transacton`);\n    console.log(tx); //const {web3} = this.state\n    //const ethereum = await getEthereum()\n\n    const sentTx = await ethereum.request({\n      method: 'eth_sendTransaction',\n      params: [tx]\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"btn btn-primary\",\n    onClick: createTicket,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, \"Create Ticket\"), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Tickets, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default SourceRollupBountyPanel;","map":{"version":3,"sources":["/home/sherif/code/crypto/bridge/react/client/src/components/SourceRollupBountyPanel.js"],"names":["React","Tickets","getEthereum","getWeb3","getContract","SourceRollupBountyPanel","createTicket","e","ethereum","ssbridge","web3","gasPrice","eth","getGasPrice","accounts","request","method","encodedABI","methods","encodeABI","tx","from","to","data","console","log","sentTx","params"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAAQC,WAAR,QAA0B,gBAA1B;AACA,SAAQC,OAAR,QAAsB,YAAtB;AACA,SAAQC,WAAR,QAA0B,gBAA1B;;AAEA,MAAMC,uBAAuB,GAAG,MAAM;AAElC,MAAIC,YAAY,GAAG,MAAOC,CAAP,IAAa;AAC5B,UAAMC,QAAQ,GAAG,MAAMN,WAAW,EAAlC;AACA,QAAIO,QAAQ,GAAI,MAAML,WAAW,EAAjC;AACA,UAAMM,IAAI,GAAG,MAAMP,OAAO,EAA1B;AACA,QAAIQ,QAAQ,GAAG,MAAMD,IAAI,CAACE,GAAL,CAASC,WAAT,EAArB;AAEA,UAAMC,QAAQ,GAAG,MAAMN,QAAQ,CAACO,OAAT,CAAiB;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAjB,CAAvB;AAEA,QAAIC,UAAU,GAAGR,QAAQ,CAACS,OAAT,CAAiBZ,YAAjB,GAAgCa,SAAhC,EAAjB;AAEA,QAAIC,EAAE,GAAG;AACLC,MAAAA,IAAI,EAAEP,QAAQ,CAAC,CAAD,CADT;AAELQ,MAAAA,EAAE,EAAE,4CAFC;AAGLC,MAAAA,IAAI,EAAEN,UAHD,CAIL;;AAJK,KAAT,CAV4B,CAkB5B;AACA;AAEA;AAEA;;AAEAO,IAAAA,OAAO,CAACC,GAAR,CAAa,YAAb;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYL,EAAZ,EA1B4B,CA2B5B;AAEE;;AACA,UAAMM,MAAM,GAAG,MAAMlB,QAAQ,CAACO,OAAT,CAAiB;AACpCC,MAAAA,MAAM,EAAE,qBAD4B;AAEpCW,MAAAA,MAAM,EAAE,CAACP,EAAD;AAF4B,KAAjB,CAArB;AAKL,GAnCD;;AAqCA,sBAAO,uDACH;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,SAAS,EAAC,iBAAhC;AAAkD,IAAA,OAAO,EAAEd,YAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADG,eAEH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFG,eAGH,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHG,CAAP;AAMH,CA7CD;;AA+CA,eAAeD,uBAAf","sourcesContent":["import React from \"react\"\nimport Tickets from \"./Tickets\";\nimport {getEthereum} from \"../getEthereum\"\nimport {getWeb3} from \"../getWeb3\"\nimport {getContract} from \"../getContract\"\n\nconst SourceRollupBountyPanel = () => {\n\n    let createTicket = async (e) => {\n        const ethereum = await getEthereum()\n        let ssbridge =  await getContract()\n        const web3 = await getWeb3()\n        var gasPrice = await web3.eth.getGasPrice();\n        \n        const accounts = await ethereum.request({ method: 'eth_requestAccounts' });\n    \n        let encodedABI = ssbridge.methods.createTicket().encodeABI()\n    \n        var tx = {\n            from: accounts[0],\n            to: \"0xD904b21D46603e2B6C606f401C412fE413DcAB74\",\n            data: encodedABI,\n            //gasPrice: gasPrice\n        };\n        \n        \n        //var gasLimit = 12000;\n        //var transactionFee = gasPrice * gasLimit; // calculate the transaction fee\n    \n        //tx.gas = String(gasLimit);\n        \n        //tx.value = String(transactionFee); // set the transaction value to the entire balance, less the transaction fee\n        \n        console.log(`Transacton`)\n        console.log(tx)\n        //const {web3} = this.state\n    \n          //const ethereum = await getEthereum()\n          const sentTx = await ethereum.request({\n            method: 'eth_sendTransaction',\n            params: [tx],\n          }); \n        \n    }\n\n    return(<>\n        <button type=\"submit\" className=\"btn btn-primary\" onClick={createTicket}>Create Ticket</button>\n        <hr/>\n        <Tickets />\n        </>\n    );\n}\n\nexport default SourceRollupBountyPanel"]},"metadata":{},"sourceType":"module"}