{"ast":null,"code":"var _jsxFileName = \"/home/sherif/code/crypto/bridge/react/client/src/components/Form.js\";\nimport React, { useState, useContext } from \"react\";\nimport { GlobalContext } from '../context/GlobalState';\nimport { getEthereum } from \"../getEthereum\";\nimport { getWeb3 } from \"../getWeb3\";\nimport { getContract } from \"../getContract\";\n\nconst Form = () => {\n  const [token, setToken] = useState('');\n  const [amountInput, setAmount] = useState(0);\n  const [destinationInput, setDestination] = useState('');\n  const {\n    currencies\n  } = useContext(GlobalContext);\n\n  let setWithdrawal = async e => {\n    e.preventDefault();\n    const value = parseInt(amountInput);\n    const ethereum = await getEthereum();\n    let ssbridge = await getContract();\n    const web3 = await getWeb3();\n    var gasPrice = await web3.eth.getGasPrice();\n    const accounts = await ethereum.request({\n      method: 'eth_requestAccounts'\n    });\n    let encodedABI = ssbridge.methods.withdraw(token, destinationInput, amountInput, 1, 10, 1).encodeABI();\n    console.log(`Test1`);\n    var tx = {\n      from: accounts[0],\n      to: \"0xD904b21D46603e2B6C606f401C412fE413DcAB74\",\n      data: encodedABI,\n      gasPrice: gasPrice\n    };\n    var gasLimit = 12000;\n    var transactionFee = gasPrice * gasLimit; // calculate the transaction fee\n\n    tx.gas = String(gasLimit);\n    tx.value = String(value + transactionFee); // set the transaction value to the entire balance, less the transaction fee\n\n    console.log(`Transacton`);\n    console.log(tx); //const {web3} = this.state\n    //const ethereum = await getEthereum()\n\n    const sentTx = await ethereum.request({\n      method: 'eth_sendTransaction',\n      params: [tx]\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    className: \"needs-validation p-3\",\n    onSubmit: e => setWithdrawal(e),\n    noValidate: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"Token\",\n    className: \"form-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  }, \"Token\"), /*#__PURE__*/React.createElement(\"select\", {\n    className: \"form-select\",\n    onChange: e => setToken(e.target.value),\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }, currencies.map(currency => /*#__PURE__*/React.createElement(\"option\", {\n    key: currency.key,\n    value: currency.address,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }\n  }, currency.name)))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"Amount\",\n    className: \"form-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  }, \"Amount\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    className: \"form-control\",\n    name: \"amountInput\",\n    placeholder: \"\",\n    value: amountInput,\n    onChange: e => setAmount(e.target.value),\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"Destination\",\n    className: \"form-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  }, \"Destination Address\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    className: \"form-control\",\n    name: \"destinationInput\",\n    placeholder: \"\",\n    value: destinationInput,\n    onChange: e => setDestination(e.target.value),\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"btn btn-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 8\n    }\n  }, \"Send\"));\n};\n\nexport default Form;","map":{"version":3,"sources":["/home/sherif/code/crypto/bridge/react/client/src/components/Form.js"],"names":["React","useState","useContext","GlobalContext","getEthereum","getWeb3","getContract","Form","token","setToken","amountInput","setAmount","destinationInput","setDestination","currencies","setWithdrawal","e","preventDefault","value","parseInt","ethereum","ssbridge","web3","gasPrice","eth","getGasPrice","accounts","request","method","encodedABI","methods","withdraw","encodeABI","console","log","tx","from","to","data","gasLimit","transactionFee","gas","String","sentTx","params","target","map","currency","key","address","name"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from \"react\"\nimport {GlobalContext} from '../context/GlobalState';\nimport {getEthereum} from \"../getEthereum\"\nimport {getWeb3} from \"../getWeb3\"\nimport {getContract} from \"../getContract\"\n\nconst Form = () => {\n  const [token, setToken] = useState('');\n  const [amountInput, setAmount] = useState(0);\n  const [destinationInput, setDestination] = useState('');\n  const {currencies} = useContext(GlobalContext);\n\n  \n  let setWithdrawal = async (e) => {\n    e.preventDefault()\n    const value = parseInt(amountInput)\n    const ethereum = await getEthereum()\n    let ssbridge =  await getContract()\n    const web3 = await getWeb3()\n    var gasPrice = await web3.eth.getGasPrice();\n    \n    const accounts = await ethereum.request({ method: 'eth_requestAccounts' });\n\n    let encodedABI = ssbridge.methods.withdraw(token,\n    destinationInput, amountInput,\n       1, 10, 1).encodeABI()\n       console.log(`Test1`)\n    var tx = {\n        from: accounts[0],\n        to: \"0xD904b21D46603e2B6C606f401C412fE413DcAB74\",\n        data: encodedABI,\n        gasPrice: gasPrice\n    };\n    \n    var gasLimit = 12000;\n    var transactionFee = gasPrice * gasLimit; // calculate the transaction fee\n\n    tx.gas = String(gasLimit);\n    tx.value = String(value + transactionFee); // set the transaction value to the entire balance, less the transaction fee\n\n\n    console.log(`Transacton`)\n    console.log(tx)\n    //const {web3} = this.state\n\n      //const ethereum = await getEthereum()\n      const sentTx = await ethereum.request({\n        method: 'eth_sendTransaction',\n        params: [tx],\n      }); \n    \n}\n\n  return (\n    <form className=\"needs-validation p-3\" onSubmit={(e) => setWithdrawal(e)} noValidate>\n      <div className=\"mb-3\">\n          <label htmlFor=\"Token\" className=\"form-label\">Token</label>\n          <select className=\"form-select\" onChange={(e) => setToken(e.target.value)} required>\n          {currencies.map((currency)=>(\n                <option key={currency.key} value={currency.address}>{currency.name}</option>\n            ))}\n          </select>\n       </div>\n       <div className=\"mb-3\">\n          <label htmlFor=\"Amount\" className=\"form-label\">Amount</label>\n          <input type=\"text\" className=\"form-control\" name=\"amountInput\" placeholder=\"\" value={amountInput}\n          onChange={(e) => setAmount(e.target.value)} required/>\n       </div>\n       <div className=\"mb-3\">\n          <label htmlFor=\"Destination\" className=\"form-label\">Destination Address</label>\n          <input type=\"text\" className=\"form-control\"  name=\"destinationInput\" placeholder=\"\" value={destinationInput}\n          onChange={(e) => setDestination(e.target.value)} required/>\n       </div>\n       <button type=\"submit\" className=\"btn btn-primary\">Send</button>\n    </form>\n  )\n}\n\nexport default Form\n"]},"metadata":{},"sourceType":"module"}