{"ast":null,"code":"var _jsxFileName = \"/home/sherif/code/crypto/bridge/react/client/src/components/Transactions.js\";\nimport React, { useState, useEffect } from \"react\";\nimport '../../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport { getWeb3 } from \"./getWeb3\";\nimport map from \"./artifacts/deployments/map.json\";\nimport { getEthereum } from \"./getEthereum\";\n\nconst Transactions = ({\n  currencies\n}) => {\n  const [transactions, setTransactions] = useState([]);\n  useEffect(() => {\n    loadContract = async (chain, contractName, address) => {\n      // Load a deployed contract instance into a web3 contract object\n      const {\n        web3\n      } = this.state;\n      /*\n      // Get the address of the most recent deployment from the deployment map\n      let address\n      try {\n          address = map[chain][contractName][0]\n      } catch (e) {\n          console.log(`Couldn't find any deployed contract \"${contractName}\" on the chain \"${chain}\".`)\n          return undefined\n      }*/\n      // Load the artifact with the specified address\n\n      let contractArtifact;\n\n      try {\n        contractArtifact = await import(`./artifacts/deployments/${chain}/${address}.json`);\n      } catch (e) {\n        console.log(`Failed to load contract artifact \"./artifacts/deployments/${chain}/${address}.json\"`);\n        return undefined;\n      }\n\n      return new web3.eth.Contract(contractArtifact.abi, address);\n    };\n\n    async function fetchTransactions() {\n      const web3 = await getWeb3(); // Try and enable accounts (connect metamask)\n\n      const ethereum = await getEthereum();\n\n      try {\n        //const ethereum = await getEthereum()\n        ethereum.enable();\n        console.log(`Metamask`);\n        const accounts = await ethereum.request({\n          method: 'eth_requestAccounts'\n        }); // Get the current chain id\n\n        const chainid = parseInt((await web3.eth.getChainId())); // <=42 to exclude Kovan, <42 to include kovan\n\n        if (this.state.chainid < 42) {\n          // Wrong Network!\n          return;\n        }\n\n        console.log(this.state.chainid);\n        var _chainID = 0;\n\n        if (this.state.chainid === 42) {\n          _chainID = 42;\n        }\n\n        if (this.state.chainid === 1337) {\n          _chainID = \"dev\";\n        }\n\n        console.log(_chainID);\n        const ssbridge = await this.loadContract(_chainID, \"SourceDomainSideBridge\", \"0xD904b21D46603e2B6C606f401C412fE413DcAB74\");\n        let root = await ssbridge.methods.get_deposit_root().call();\n\n        if (!ssbridge) {\n          return;\n        }\n\n        let events = await ssbridge.getPastEvents(\"allEvents\", {\n          fromBlock: 1\n        }); //const ssbridgeEvents = await ssbridge.getPastEvents(\"allEvents\", { fromBlock: 1}).then(console.log);\n\n        console.log(\"Events\");\n        console.log(events[0]['returnValues']);\n        console.log(root);\n        setTransactions(events);\n      } catch (e) {\n        console.log(`Could not enable accounts. Interaction with contracts not available.\n        Use a modern browser with a Web3 plugin to fix this issue.`);\n        console.log(e);\n      }\n    }\n\n    fetchTransactions();\n  }, [transactions]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }, \"Recent Transactions\"), /*#__PURE__*/React.createElement(\"table\", {\n    className: \"table table-striped\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    scope: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }\n  }, \"Token\"), /*#__PURE__*/React.createElement(\"th\", {\n    scope: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 17\n    }\n  }, \"Destination Address\"), /*#__PURE__*/React.createElement(\"th\", {\n    scope: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 17\n    }\n  }, \"Amount\"), /*#__PURE__*/React.createElement(\"th\", {\n    scope: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 17\n    }\n  }, \"Status\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 11\n    }\n  }, transactions.map((transaction, index) => /*#__PURE__*/React.createElement(\"tr\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 19\n    }\n  }, GetCurrencyName(currencies, transaction), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 21\n    }\n  }, transaction[1]), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 21\n    }\n  }, transaction[2]), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 21\n    }\n  }, \"Pending Bounty\"))))));\n};\n\nfunction GetCurrencyName(currencies, transaction) {\n  return /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 5\n    }\n  }, currencies.find(currency => currency.address === transaction[0]).name);\n}\n\nexport default Transactions;","map":{"version":3,"sources":["/home/sherif/code/crypto/bridge/react/client/src/components/Transactions.js"],"names":["React","useState","useEffect","getWeb3","map","getEthereum","Transactions","currencies","transactions","setTransactions","loadContract","chain","contractName","address","web3","state","contractArtifact","e","console","log","undefined","eth","Contract","abi","fetchTransactions","ethereum","enable","accounts","request","method","chainid","parseInt","getChainId","_chainID","ssbridge","root","methods","get_deposit_root","call","events","getPastEvents","fromBlock","transaction","index","GetCurrencyName","find","currency","name"],"mappings":"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","sourcesContent":["import React, { useState,useEffect } from \"react\"\nimport '../../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport {getWeb3} from \"./getWeb3\"\nimport map from \"./artifacts/deployments/map.json\"\nimport {getEthereum} from \"./getEthereum\"\n\nconst Transactions =  ({currencies}) => {\n  const[transactions, setTransactions] = useState([]);\n\n  useEffect(() => {\n    loadContract = async (chain, contractName, address) => {\n      // Load a deployed contract instance into a web3 contract object\n      const {web3} = this.state\n      /*\n      // Get the address of the most recent deployment from the deployment map\n      let address\n      try {\n          address = map[chain][contractName][0]\n      } catch (e) {\n          console.log(`Couldn't find any deployed contract \"${contractName}\" on the chain \"${chain}\".`)\n          return undefined\n      }*/\n\n      // Load the artifact with the specified address\n      let contractArtifact\n      try {\n          contractArtifact = await import(`./artifacts/deployments/${chain}/${address}.json`)\n      } catch (e) {\n          console.log(`Failed to load contract artifact \"./artifacts/deployments/${chain}/${address}.json\"`)\n          return undefined\n      }\n\n      return new web3.eth.Contract(contractArtifact.abi, address)\n  }\n  \n    async function fetchTransactions(){\n    const web3 = await getWeb3()\n\n    // Try and enable accounts (connect metamask)\n    const ethereum = await getEthereum()\n    try {\n        //const ethereum = await getEthereum()\n        ethereum.enable()\n        console.log(`Metamask`)\n\n        const accounts = await ethereum.request({ method: 'eth_requestAccounts' });\n\n        // Get the current chain id\n        const chainid = parseInt(await web3.eth.getChainId())\n\n        // <=42 to exclude Kovan, <42 to include kovan\n        if (this.state.chainid < 42) {\n          // Wrong Network!\n          return\n      }\n      console.log(this.state.chainid)\n      \n      var _chainID = 0;\n      if (this.state.chainid === 42){\n          _chainID = 42;\n      }\n      if (this.state.chainid === 1337){\n          _chainID = \"dev\"\n      }\n      console.log(_chainID)\n      const ssbridge = await this.loadContract(_chainID,\"SourceDomainSideBridge\", \"0xD904b21D46603e2B6C606f401C412fE413DcAB74\")\n      let root = await ssbridge.methods.get_deposit_root().call()\n      if (!ssbridge) {\n          return\n      }\n      let events = await ssbridge.getPastEvents(\"allEvents\", { fromBlock: 1})\n      //const ssbridgeEvents = await ssbridge.getPastEvents(\"allEvents\", { fromBlock: 1}).then(console.log);\n      console.log(\"Events\")\n      console.log(events[0]['returnValues'])\n      console.log(root)\n      setTransactions(events)\n\n    } catch (e) {\n        console.log(`Could not enable accounts. Interaction with contracts not available.\n        Use a modern browser with a Web3 plugin to fix this issue.`)\n        console.log(e)\n    }\n  }\n  fetchTransactions()\n  }, [transactions])\n\n  return (\n    \n    <div>\n        <h2>Recent Transactions</h2>\n\n        <table className=\"table table-striped\">\n          <thead>\n              <tr>\n                <th scope=\"col\">Token</th>\n                <th scope=\"col\">Destination Address</th>\n                <th scope=\"col\">Amount</th>\n                <th scope=\"col\">Status</th>\n              </tr>\n          </thead>\n          <tbody>\n              {transactions.map((transaction,index)=>(\n                  <tr key={index}>\n                    {GetCurrencyName(currencies,transaction)}\n                    <td>{transaction[1]}</td>\n                    <td>{transaction[2]}</td>\n                    <td>Pending Bounty</td>\n                  </tr>\n              ))}\n          </tbody>\n        </table>\n    </div>\n  )\n}\n\nfunction GetCurrencyName(currencies,transaction) {\n  return (\n    <td>{currencies.find(currency => currency.address === transaction[0]).name}</td>\n  );\n}\n\nexport default Transactions"]},"metadata":{},"sourceType":"module"}