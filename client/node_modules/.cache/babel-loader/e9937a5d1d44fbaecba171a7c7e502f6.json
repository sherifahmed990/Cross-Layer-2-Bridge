{"ast":null,"code":"var _jsxFileName = \"/home/sherif/code/crypto/bridge/react/client/src/App.js\";\nimport React, { Component, useContext } from \"react\";\nimport './App.css';\nimport { getWeb3 } from \"./getWeb3\";\nimport map from \"./artifacts/deployments/map.json\";\nimport { getEthereum } from \"./getEthereum\";\nimport Form from './components/Form';\nimport Transactions from './components/Transactions';\nimport Header from './components/Header';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport '../node_modules/bootstrap/dist/js/bootstrap';\nimport { GlobalContext, GlobalProvider } from './context/GlobalState';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      web3: null,\n      accounts: null,\n      chainid: null,\n      SourceDomainSideBridge: null,\n      amountInput: 0,\n      destinationInput: 0\n    };\n    this.currencies = useContext(GlobalContext).currencies;\n\n    this.componentDidMount = async () => {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3(); // Try and enable accounts (connect metamask)\n\n      const ethereum = await getEthereum();\n\n      try {\n        //const ethereum = await getEthereum()\n        ethereum.enable();\n        console.log(`Metamask`);\n      } catch (e) {\n        console.log(`Could not enable accounts. Interaction with contracts not available.\n            Use a modern browser with a Web3 plugin to fix this issue.`);\n        console.log(e);\n      }\n\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts'\n      }); // Get the current chain id\n\n      const chainid = parseInt((await web3.eth.getChainId()));\n      this.setState({\n        web3,\n        accounts,\n        chainid\n      }, (await this.loadInitialContracts));\n    };\n\n    this.loadInitialContracts = async () => {\n      // <=42 to exclude Kovan, <42 to include kovan\n      if (this.state.chainid < 42) {\n        // Wrong Network!\n        return;\n      }\n\n      console.log(this.state.chainid);\n      var _chainID = 0;\n\n      if (this.state.chainid === 42) {\n        _chainID = 42;\n      }\n\n      if (this.state.chainid === 1337) {\n        _chainID = \"dev\";\n      }\n\n      console.log(_chainID);\n      const ssbridge = await this.loadContract(_chainID, \"SourceDomainSideBridge\", \"0xD904b21D46603e2B6C606f401C412fE413DcAB74\");\n      let root = await ssbridge.methods.get_deposit_root().call();\n\n      if (!ssbridge) {\n        return;\n      }\n\n      let events = await ssbridge.getPastEvents(\"allEvents\", {\n        fromBlock: 1\n      }); //const ssbridgeEvents = await ssbridge.getPastEvents(\"allEvents\", { fromBlock: 1}).then(console.log);\n\n      console.log(\"Events\");\n      console.log(events[0]['returnValues']);\n      console.log(root);\n      let transactions = events.map(event => [event[\"returnValues\"][0][0], event[\"returnValues\"][0][1], event[\"returnValues\"][0][2]]);\n      console.log(transactions); //const solidityValue = await solidityStorage.methods.get().call()\n\n      this.state.currencyInput = \"0x0000000000000000000000000000000000000000\";\n      this.setState({\n        ssbridge,\n        transactions //ssbridgeEvents,\n\n      });\n    };\n\n    this.loadContract = async (chain, contractName, address) => {\n      // Load a deployed contract instance into a web3 contract object\n      const {\n        web3\n      } = this.state;\n      /*\n      // Get the address of the most recent deployment from the deployment map\n      let address\n      try {\n          address = map[chain][contractName][0]\n      } catch (e) {\n          console.log(`Couldn't find any deployed contract \"${contractName}\" on the chain \"${chain}\".`)\n          return undefined\n      }*/\n      // Load the artifact with the specified address\n\n      let contractArtifact;\n\n      try {\n        contractArtifact = await import(`./artifacts/deployments/${chain}/${address}.json`);\n      } catch (e) {\n        console.log(`Failed to load contract artifact \"./artifacts/deployments/${chain}/${address}.json\"`);\n        return undefined;\n      }\n\n      return new web3.eth.Contract(contractArtifact.abi, address);\n    };\n\n    this.setWithdrawal = async e => {\n      const {\n        accounts,\n        amountInput,\n        destinationInput,\n        currencyInput,\n        ssbridge\n      } = this.state;\n      e.preventDefault();\n      const value = parseInt(amountInput);\n\n      if (isNaN(value)) {\n        alert(\"invalid value\");\n        return;\n      }\n\n      const {\n        web3\n      } = this.state;\n      var gasPrice = await web3.eth.getGasPrice();\n      let encodedABI = ssbridge.methods.withdraw(currencyInput, destinationInput, amountInput, 1, 10, 1).encodeABI();\n      var tx = {\n        from: accounts[0],\n        to: \"0xD904b21D46603e2B6C606f401C412fE413DcAB74\",\n        data: encodedABI,\n        gasPrice: gasPrice\n      };\n      var gasLimit = 12000;\n      var transactionFee = gasPrice * gasLimit; // calculate the transaction fee\n\n      tx.gas = String(gasLimit);\n      tx.value = String(value + transactionFee); // set the transaction value to the entire balance, less the transaction fee\n\n      console.log(`Transacton`);\n      console.log(tx); //const {web3} = this.state\n\n      const ethereum = await getEthereum();\n      const sentTx = await ethereum.request({\n        method: 'eth_sendTransaction',\n        params: [tx]\n      });\n    };\n\n    this.changeVyper = async e => {\n      const {\n        accounts,\n        vyperStorage,\n        vyperInput\n      } = this.state;\n      e.preventDefault();\n      const value = parseInt(vyperInput);\n\n      if (isNaN(value)) {\n        alert(\"invalid value\");\n        return;\n      }\n\n      await vyperStorage.methods.set(value).send({\n        from: accounts[0]\n      });\n    };\n\n    this.changeSolidity = async e => {\n      const {\n        accounts,\n        solidityStorage,\n        solidityInput\n      } = this.state;\n      e.preventDefault();\n      const value = parseInt(solidityInput);\n\n      if (isNaN(value)) {\n        alert(\"invalid value\");\n        return;\n      }\n\n      await solidityStorage.methods.set(value).send({\n        from: accounts[0]\n      }).on('receipt', async () => {\n        this.setState({\n          solidityValue: await solidityStorage.methods.get().call()\n        });\n      });\n    };\n  }\n\n  handleChange(event) {\n    this.setState({\n      value: event.target.value\n    });\n  }\n\n  render() {\n    const {\n      web3,\n      accounts,\n      chainid,\n      transactions,\n      solidityValue,\n      solidityInput,\n      ssbridge,\n      ssbridgeEvents,\n      events\n    } = this.state;\n\n    if (!web3) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 20\n        }\n      }, \"Loading Web3, accounts, and contracts...\");\n    } // <=42 to exclude Kovan, <42 to include Kovan\n\n\n    if (isNaN(chainid) || chainid < 42) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 20\n        }\n      }, \"Wrong Network! Switch to your local RPC \\\"Localhost: 8545\\\" in your Web3 provider (e.g. Metamask)\");\n    }\n\n    if (!ssbridge) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 20\n        }\n      }, \"Could not find a deployed contract. Check console for details.\");\n    }\n\n    const isAccountsUnlocked = accounts ? accounts.length > 0 : false;\n    return /*#__PURE__*/React.createElement(GlobalProvider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App bg-light\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 27\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn float-start mt-1 btn-primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 17\n      }\n    }, \"Connect to Wallet\"), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn float-end mt-1 btn-primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 17\n      }\n    }, \"Connect to Wallet\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"py-5 text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 25\n      }\n    }, \"Cross Layer2 Bridge(Kovan) - Beta\"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 25\n      }\n    }, \"Source Rollup : Optimism - Destination Rollup : Optimism \")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      currencies: this.currencies,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"hr\", {\n      className: \"mb-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Transactions, {\n      transactions: transactions,\n      currencies: this.currencies,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 25\n      }\n    })))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/sherif/code/crypto/bridge/react/client/src/App.js"],"names":["React","Component","useContext","getWeb3","map","getEthereum","Form","Transactions","Header","GlobalContext","GlobalProvider","App","state","web3","accounts","chainid","SourceDomainSideBridge","amountInput","destinationInput","currencies","componentDidMount","ethereum","enable","console","log","e","request","method","parseInt","eth","getChainId","setState","loadInitialContracts","_chainID","ssbridge","loadContract","root","methods","get_deposit_root","call","events","getPastEvents","fromBlock","transactions","event","currencyInput","chain","contractName","address","contractArtifact","undefined","Contract","abi","setWithdrawal","preventDefault","value","isNaN","alert","gasPrice","getGasPrice","encodedABI","withdraw","encodeABI","tx","from","to","data","gasLimit","transactionFee","gas","String","sentTx","params","changeVyper","vyperStorage","vyperInput","set","send","changeSolidity","solidityStorage","solidityInput","on","solidityValue","get","handleChange","target","render","ssbridgeEvents","isAccountsUnlocked","length"],"mappings":"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","sourcesContent":["import React, {Component, useContext} from \"react\"\nimport './App.css'\nimport {getWeb3} from \"./getWeb3\"\nimport map from \"./artifacts/deployments/map.json\"\nimport {getEthereum} from \"./getEthereum\"\nimport Form from './components/Form'\nimport Transactions from './components/Transactions'\nimport Header from './components/Header'\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport '../node_modules/bootstrap/dist/js/bootstrap';\nimport {GlobalContext, GlobalProvider} from './context/GlobalState';\n\n\nclass App extends Component {\n\n    state = {\n        web3: null,\n        accounts: null,\n        chainid: null,\n        SourceDomainSideBridge:null,\n        amountInput: 0,\n        destinationInput: 0,\n    }\n\n    currencies  = useContext(GlobalContext).currencies\n\n    componentDidMount = async () => {\n        \n        // Get network provider and web3 instance.\n        const web3 = await getWeb3()\n\n        // Try and enable accounts (connect metamask)\n        const ethereum = await getEthereum()\n        try {\n            //const ethereum = await getEthereum()\n            ethereum.enable()\n            console.log(`Metamask`)\n        } catch (e) {\n            console.log(`Could not enable accounts. Interaction with contracts not available.\n            Use a modern browser with a Web3 plugin to fix this issue.`)\n            console.log(e)\n        }\n\n\n        const accounts = await ethereum.request({ method: 'eth_requestAccounts' });\n\n        // Get the current chain id\n        const chainid = parseInt(await web3.eth.getChainId())\n\n        this.setState({\n            web3,\n            accounts,\n            chainid\n        }, await this.loadInitialContracts)\n\n    }\n\n    loadInitialContracts = async () => {\n        // <=42 to exclude Kovan, <42 to include kovan\n        if (this.state.chainid < 42) {\n            // Wrong Network!\n            return\n        }\n        console.log(this.state.chainid)\n        \n        var _chainID = 0;\n        if (this.state.chainid === 42){\n            _chainID = 42;\n        }\n        if (this.state.chainid === 1337){\n            _chainID = \"dev\"\n        }\n        console.log(_chainID)\n        const ssbridge = await this.loadContract(_chainID,\"SourceDomainSideBridge\", \"0xD904b21D46603e2B6C606f401C412fE413DcAB74\")\n        let root = await ssbridge.methods.get_deposit_root().call()\n        if (!ssbridge) {\n            return\n        }\n        let events = await ssbridge.getPastEvents(\"allEvents\", { fromBlock: 1})\n        //const ssbridgeEvents = await ssbridge.getPastEvents(\"allEvents\", { fromBlock: 1}).then(console.log);\n        console.log(\"Events\")\n        console.log(events[0]['returnValues'])\n        console.log(root)\n        let transactions = events.map((event)=>([event[\"returnValues\"][0][0],\n            event[\"returnValues\"][0][1],event[\"returnValues\"][0][2]]))\n            console.log(transactions)\n        //const solidityValue = await solidityStorage.methods.get().call()\n        this.state.currencyInput = \"0x0000000000000000000000000000000000000000\"\n        \n        this.setState({\n            ssbridge,\n            transactions,\n            //ssbridgeEvents,\n        })\n\n    }\n\n    loadContract = async (chain, contractName, address) => {\n        // Load a deployed contract instance into a web3 contract object\n        const {web3} = this.state\n        /*\n        // Get the address of the most recent deployment from the deployment map\n        let address\n        try {\n            address = map[chain][contractName][0]\n        } catch (e) {\n            console.log(`Couldn't find any deployed contract \"${contractName}\" on the chain \"${chain}\".`)\n            return undefined\n        }*/\n\n        // Load the artifact with the specified address\n        let contractArtifact\n        try {\n            contractArtifact = await import(`./artifacts/deployments/${chain}/${address}.json`)\n        } catch (e) {\n            console.log(`Failed to load contract artifact \"./artifacts/deployments/${chain}/${address}.json\"`)\n            return undefined\n        }\n\n        return new web3.eth.Contract(contractArtifact.abi, address)\n    }\n\n    setWithdrawal = async (e) => {\n        const {accounts, amountInput, destinationInput, currencyInput, \n            ssbridge} = this.state\n        e.preventDefault()\n        const value = parseInt(amountInput)\n        if (isNaN(value)) {\n            alert(\"invalid value\")\n            return\n        }\n        const {web3} = this.state\n        var gasPrice = await web3.eth.getGasPrice();\n\n        let encodedABI = ssbridge.methods.withdraw(currencyInput,\n        destinationInput, amountInput,\n           1, 10, 1).encodeABI()\n        var tx = {\n            from: accounts[0],\n            to: \"0xD904b21D46603e2B6C606f401C412fE413DcAB74\",\n            data: encodedABI,\n            gasPrice: gasPrice\n        };\n        var gasLimit = 12000;\n        var transactionFee = gasPrice * gasLimit; // calculate the transaction fee\n\n        tx.gas = String(gasLimit);\n        tx.value = String(value + transactionFee); // set the transaction value to the entire balance, less the transaction fee\n\n\n        console.log(`Transacton`)\n        console.log(tx)\n        //const {web3} = this.state\n\n          const ethereum = await getEthereum()\n          const sentTx = await ethereum.request({\n            method: 'eth_sendTransaction',\n            params: [tx],\n          });\n    }\n\n    changeVyper = async (e) => {\n        const {accounts, vyperStorage, vyperInput} = this.state\n        e.preventDefault()\n        const value = parseInt(vyperInput)\n        if (isNaN(value)) {\n            alert(\"invalid value\")\n            return\n        }\n        await vyperStorage.methods.set(value).send({from: accounts[0]})\n            \n    }\n\n    changeSolidity = async (e) => {\n        const {accounts, solidityStorage, solidityInput} = this.state\n        e.preventDefault()\n        const value = parseInt(solidityInput)\n        if (isNaN(value)) {\n            alert(\"invalid value\")\n            return\n        }\n        await solidityStorage.methods.set(value).send({from: accounts[0]})\n            .on('receipt', async () => {\n                this.setState({\n                    solidityValue: await solidityStorage.methods.get().call()\n                })\n            })\n    }\n\n    handleChange(event) {\n        this.setState({value: event.target.value});\n      }\n\n    render() {\n        const {\n            web3, accounts, chainid,transactions,\n            solidityValue, solidityInput, ssbridge,ssbridgeEvents,events\n        } = this.state\n\n        if (!web3) {\n            return <div>Loading Web3, accounts, and contracts...</div>\n        }\n\n        // <=42 to exclude Kovan, <42 to include Kovan\n        if (isNaN(chainid) || chainid < 42) {\n            return <div>Wrong Network! Switch to your local RPC \"Localhost: 8545\" in your Web3 provider (e.g. Metamask)</div>\n        }\n\n        if (!ssbridge) {\n            return <div>Could not find a deployed contract. Check console for details.</div>\n        }\n\n        const isAccountsUnlocked = accounts ? accounts.length > 0 : false\n\n        return (\n        <GlobalProvider>\n        <div className=\"App bg-light\">\n                <div className=\"container\">\n                <Header /><br/>\n                <button type=\"button\" className=\"btn float-start mt-1 btn-primary\">Connect to Wallet</button>\n                <button type=\"button\" className=\"btn float-end mt-1 btn-primary\">Connect to Wallet</button>\n                    <div className=\"py-5 text-center\">\n                        <h1>Cross Layer2 Bridge(Kovan) - Beta</h1>\n                        <h3>Source Rollup : Optimism - Destination Rollup : Optimism </h3>\n                    </div>\n                    <div className=\"row\">\n                        <Form currencies={this.currencies}/>\n                    </div>\n                    <hr className=\"mb-4\" />\n                    <div className=\"row\"> \n                        <Transactions transactions={transactions} currencies={this.currencies}/>\n                    </div>\n                </div>\n\n        </div>\n        </GlobalProvider>)\n    }\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}