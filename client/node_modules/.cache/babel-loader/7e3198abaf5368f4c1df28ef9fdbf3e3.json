{"ast":null,"code":"var _jsxFileName = \"/home/sherif/code/crypto/bridge/react/client/src/App.js\";\nimport React, { Component, useContext } from \"react\";\nimport './App.css';\nimport { getWeb3 } from \"./getWeb3\";\nimport map from \"./artifacts/deployments/map.json\";\nimport { getEthereum } from \"./getEthereum\";\nimport Form from './components/Form';\nimport Transactions from './components/Transactions';\nimport Header from './components/Header';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport '../node_modules/bootstrap/dist/js/bootstrap';\nimport { GlobalContext, GlobalProvider } from './context/GlobalState';\n\nfunction App() {\n  return /*#__PURE__*/React.createElement(GlobalProvider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App bg-light\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn float-start mt-1 btn-primary\",\n    onClick: useContext({\n      GlobalContext\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 17\n    }\n  }, \"Connect to Wallet\"), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn float-end mt-1 btn-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 17\n    }\n  }, \"Connect to Wallet\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"py-5 text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 25\n    }\n  }, \"Cross Layer2 Bridge(Kovan) - Beta\"), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 25\n    }\n  }, \"Source Rollup : Optimism - Destination Rollup : Optimism \")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(\"hr\", {\n    className: \"mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 21\n    }\n  }))));\n}\n\nexport default App;\n/*\nclass App extends Component {\n\n    state = {\n        web3: null,\n        accounts: null,\n        chainid: null,\n        SourceDomainSideBridge:null,\n        amountInput: 0,\n        destinationInput: 0,\n    }\n\n\n    componentDidMount = async () => {\n        \n        // Get network provider and web3 instance.\n        const web3 = await getWeb3()\n\n        // Try and enable accounts (connect metamask)\n        const ethereum = await getEthereum()\n        try {\n            //const ethereum = await getEthereum()\n            ethereum.enable()\n            console.log(`Metamask`)\n        } catch (e) {\n            console.log(`Could not enable accounts. Interaction with contracts not available.\n            Use a modern browser with a Web3 plugin to fix this issue.`)\n            console.log(e)\n        }\n\n\n        const accounts = await ethereum.request({ method: 'eth_requestAccounts' });\n\n        // Get the current chain id\n        const chainid = parseInt(await web3.eth.getChainId())\n\n        this.setState({\n            web3,\n            accounts,\n            chainid\n        }, await this.loadInitialContracts)\n\n    }\n\n    loadInitialContracts = async () => {\n        // <=42 to exclude Kovan, <42 to include kovan\n        if (this.state.chainid < 42) {\n            // Wrong Network!\n            return\n        }\n        console.log(this.state.chainid)\n        \n        var _chainID = 0;\n        if (this.state.chainid === 42){\n            _chainID = 42;\n        }\n        if (this.state.chainid === 1337){\n            _chainID = \"dev\"\n        }\n        console.log(_chainID)\n        const ssbridge = await this.loadContract(_chainID,\"SourceDomainSideBridge\", \"0xD904b21D46603e2B6C606f401C412fE413DcAB74\")\n        let root = await ssbridge.methods.get_deposit_root().call()\n        if (!ssbridge) {\n            return\n        }\n        let events = await ssbridge.getPastEvents(\"allEvents\", { fromBlock: 1})\n        //const ssbridgeEvents = await ssbridge.getPastEvents(\"allEvents\", { fromBlock: 1}).then(console.log);\n        console.log(\"Events\")\n        console.log(events[0]['returnValues'])\n        console.log(root)\n        let transactions = events.map((event)=>([event[\"returnValues\"][0][0],\n            event[\"returnValues\"][0][1],event[\"returnValues\"][0][2]]))\n            console.log(transactions)\n        //const solidityValue = await solidityStorage.methods.get().call()\n        this.state.currencyInput = \"0x0000000000000000000000000000000000000000\"\n        \n        this.setState({\n            ssbridge,\n            transactions,\n            //ssbridgeEvents,\n        })\n\n    }\n\n    loadContract = async (chain, contractName, address) => {\n        // Load a deployed contract instance into a web3 contract object\n        const {web3} = this.state\n\n        // Load the artifact with the specified address\n        let contractArtifact\n        try {\n            contractArtifact = await import(`./artifacts/deployments/${chain}/${address}.json`)\n        } catch (e) {\n            console.log(`Failed to load contract artifact \"./artifacts/deployments/${chain}/${address}.json\"`)\n            return undefined\n        }\n\n        return new web3.eth.Contract(contractArtifact.abi, address)\n    }\n\n    setWithdrawal = async (e) => {\n        const {accounts, amountInput, destinationInput, currencyInput, \n            ssbridge} = this.state\n        e.preventDefault()\n        const value = parseInt(amountInput)\n        if (isNaN(value)) {\n            alert(\"invalid value\")\n            return\n        }\n        const {web3} = this.state\n        var gasPrice = await web3.eth.getGasPrice();\n\n        let encodedABI = ssbridge.methods.withdraw(currencyInput,\n        destinationInput, amountInput,\n           1, 10, 1).encodeABI()\n        var tx = {\n            from: accounts[0],\n            to: \"0xD904b21D46603e2B6C606f401C412fE413DcAB74\",\n            data: encodedABI,\n            gasPrice: gasPrice\n        };\n        var gasLimit = 12000;\n        var transactionFee = gasPrice * gasLimit; // calculate the transaction fee\n\n        tx.gas = String(gasLimit);\n        tx.value = String(value + transactionFee); // set the transaction value to the entire balance, less the transaction fee\n\n\n        console.log(`Transacton`)\n        console.log(tx)\n        //const {web3} = this.state\n\n          const ethereum = await getEthereum()\n          const sentTx = await ethereum.request({\n            method: 'eth_sendTransaction',\n            params: [tx],\n          });\n    }\n\n    changeVyper = async (e) => {\n        const {accounts, vyperStorage, vyperInput} = this.state\n        e.preventDefault()\n        const value = parseInt(vyperInput)\n        if (isNaN(value)) {\n            alert(\"invalid value\")\n            return\n        }\n        await vyperStorage.methods.set(value).send({from: accounts[0]})\n            \n    }\n\n    changeSolidity = async (e) => {\n        const {accounts, solidityStorage, solidityInput} = this.state\n        e.preventDefault()\n        const value = parseInt(solidityInput)\n        if (isNaN(value)) {\n            alert(\"invalid value\")\n            return\n        }\n        await solidityStorage.methods.set(value).send({from: accounts[0]})\n            .on('receipt', async () => {\n                this.setState({\n                    solidityValue: await solidityStorage.methods.get().call()\n                })\n            })\n    }\n\n    handleChange(event) {\n        this.setState({value: event.target.value});\n      }\n\n    render() {\n        const {\n            web3, accounts, chainid,transactions,\n            solidityValue, solidityInput, ssbridge,ssbridgeEvents,events\n        } = this.state\n\n        if (!web3) {\n            return <div>Loading Web3, accounts, and contracts...</div>\n        }\n\n        // <=42 to exclude Kovan, <42 to include Kovan\n        if (isNaN(chainid) || chainid < 42) {\n            return <div>Wrong Network! Switch to your local RPC \"Localhost: 8545\" in your Web3 provider (e.g. Metamask)</div>\n        }\n\n        if (!ssbridge) {\n            return <div>Could not find a deployed contract. Check console for details.</div>\n        }\n\n        const isAccountsUnlocked = accounts ? accounts.length > 0 : false\n\n        const currencies  = useContext(GlobalContext).currencies\n\n        return (\n        <GlobalProvider>\n        <div className=\"App bg-light\">\n                <div className=\"container\">\n                <Header /><br/>\n                <button type=\"button\" className=\"btn float-start mt-1 btn-primary\">Connect to Wallet</button>\n                <button type=\"button\" className=\"btn float-end mt-1 btn-primary\">Connect to Wallet</button>\n                    <div className=\"py-5 text-center\">\n                        <h1>Cross Layer2 Bridge(Kovan) - Beta</h1>\n                        <h3>Source Rollup : Optimism - Destination Rollup : Optimism </h3>\n                    </div>\n                    <div className=\"row\">\n                        <Form currencies={this.currencies}/>\n                    </div>\n                    <hr className=\"mb-4\" />\n                    <div className=\"row\"> \n                        <Transactions transactions={transactions} currencies={this.currencies}/>\n                    </div>\n                </div>\n\n        </div>\n        </GlobalProvider>)\n    }\n}\n\nexport default App*/","map":{"version":3,"sources":["/home/sherif/code/crypto/bridge/react/client/src/App.js"],"names":["React","Component","useContext","getWeb3","map","getEthereum","Form","Transactions","Header","GlobalContext","GlobalProvider","App"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,UAA1B,QAA2C,OAA3C;AACA,OAAO,WAAP;AACA,SAAQC,OAAR,QAAsB,WAAtB;AACA,OAAOC,GAAP,MAAgB,kCAAhB;AACA,SAAQC,WAAR,QAA0B,eAA1B;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAO,sDAAP;AACA,OAAO,6CAAP;AACA,SAAQC,aAAR,EAAuBC,cAAvB,QAA4C,uBAA5C;;AAGA,SAASC,GAAT,GAAc;AAEV,sBAAO,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACH;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACQ;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,SAAS,EAAC,kCAAhC;AAAmE,IAAA,OAAO,EAAET,UAAU,CAAC;AAACO,MAAAA;AAAD,KAAD,CAAtF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADA,eAEA;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,SAAS,EAAC,gCAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAFA,eAGI;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iEAFJ,CAHJ,eAOI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAPJ,eAUI;AAAI,IAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVJ,eAWI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXJ,CADR,CADG,CAAP;AAmBH;;AAED,eAAeE,GAAf;AACA","sourcesContent":["import React, {Component, useContext} from \"react\"\nimport './App.css'\nimport {getWeb3} from \"./getWeb3\"\nimport map from \"./artifacts/deployments/map.json\"\nimport {getEthereum} from \"./getEthereum\"\nimport Form from './components/Form'\nimport Transactions from './components/Transactions'\nimport Header from './components/Header'\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport '../node_modules/bootstrap/dist/js/bootstrap';\nimport {GlobalContext, GlobalProvider} from './context/GlobalState';\n\n\nfunction App(){\n\n    return(<GlobalProvider>\n        <div className=\"App bg-light\">\n                <div className=\"container\">\n                <button type=\"button\" className=\"btn float-start mt-1 btn-primary\" onClick={useContext({GlobalContext})}>Connect to Wallet</button>\n                <button type=\"button\" className=\"btn float-end mt-1 btn-primary\">Connect to Wallet</button>\n                    <div className=\"py-5 text-center\">\n                        <h1>Cross Layer2 Bridge(Kovan) - Beta</h1>\n                        <h3>Source Rollup : Optimism - Destination Rollup : Optimism </h3>\n                    </div>\n                    <div className=\"row\">\n                        <Form />\n                    </div>\n                    <hr className=\"mb-4\" />\n                    <div className=\"row\"> \n                    </div>\n                </div>\n\n        </div>\n        </GlobalProvider>);\n}\n\nexport default App\n/*\nclass App extends Component {\n\n    state = {\n        web3: null,\n        accounts: null,\n        chainid: null,\n        SourceDomainSideBridge:null,\n        amountInput: 0,\n        destinationInput: 0,\n    }\n\n\n    componentDidMount = async () => {\n        \n        // Get network provider and web3 instance.\n        const web3 = await getWeb3()\n\n        // Try and enable accounts (connect metamask)\n        const ethereum = await getEthereum()\n        try {\n            //const ethereum = await getEthereum()\n            ethereum.enable()\n            console.log(`Metamask`)\n        } catch (e) {\n            console.log(`Could not enable accounts. Interaction with contracts not available.\n            Use a modern browser with a Web3 plugin to fix this issue.`)\n            console.log(e)\n        }\n\n\n        const accounts = await ethereum.request({ method: 'eth_requestAccounts' });\n\n        // Get the current chain id\n        const chainid = parseInt(await web3.eth.getChainId())\n\n        this.setState({\n            web3,\n            accounts,\n            chainid\n        }, await this.loadInitialContracts)\n\n    }\n\n    loadInitialContracts = async () => {\n        // <=42 to exclude Kovan, <42 to include kovan\n        if (this.state.chainid < 42) {\n            // Wrong Network!\n            return\n        }\n        console.log(this.state.chainid)\n        \n        var _chainID = 0;\n        if (this.state.chainid === 42){\n            _chainID = 42;\n        }\n        if (this.state.chainid === 1337){\n            _chainID = \"dev\"\n        }\n        console.log(_chainID)\n        const ssbridge = await this.loadContract(_chainID,\"SourceDomainSideBridge\", \"0xD904b21D46603e2B6C606f401C412fE413DcAB74\")\n        let root = await ssbridge.methods.get_deposit_root().call()\n        if (!ssbridge) {\n            return\n        }\n        let events = await ssbridge.getPastEvents(\"allEvents\", { fromBlock: 1})\n        //const ssbridgeEvents = await ssbridge.getPastEvents(\"allEvents\", { fromBlock: 1}).then(console.log);\n        console.log(\"Events\")\n        console.log(events[0]['returnValues'])\n        console.log(root)\n        let transactions = events.map((event)=>([event[\"returnValues\"][0][0],\n            event[\"returnValues\"][0][1],event[\"returnValues\"][0][2]]))\n            console.log(transactions)\n        //const solidityValue = await solidityStorage.methods.get().call()\n        this.state.currencyInput = \"0x0000000000000000000000000000000000000000\"\n        \n        this.setState({\n            ssbridge,\n            transactions,\n            //ssbridgeEvents,\n        })\n\n    }\n\n    loadContract = async (chain, contractName, address) => {\n        // Load a deployed contract instance into a web3 contract object\n        const {web3} = this.state\n\n        // Load the artifact with the specified address\n        let contractArtifact\n        try {\n            contractArtifact = await import(`./artifacts/deployments/${chain}/${address}.json`)\n        } catch (e) {\n            console.log(`Failed to load contract artifact \"./artifacts/deployments/${chain}/${address}.json\"`)\n            return undefined\n        }\n\n        return new web3.eth.Contract(contractArtifact.abi, address)\n    }\n\n    setWithdrawal = async (e) => {\n        const {accounts, amountInput, destinationInput, currencyInput, \n            ssbridge} = this.state\n        e.preventDefault()\n        const value = parseInt(amountInput)\n        if (isNaN(value)) {\n            alert(\"invalid value\")\n            return\n        }\n        const {web3} = this.state\n        var gasPrice = await web3.eth.getGasPrice();\n\n        let encodedABI = ssbridge.methods.withdraw(currencyInput,\n        destinationInput, amountInput,\n           1, 10, 1).encodeABI()\n        var tx = {\n            from: accounts[0],\n            to: \"0xD904b21D46603e2B6C606f401C412fE413DcAB74\",\n            data: encodedABI,\n            gasPrice: gasPrice\n        };\n        var gasLimit = 12000;\n        var transactionFee = gasPrice * gasLimit; // calculate the transaction fee\n\n        tx.gas = String(gasLimit);\n        tx.value = String(value + transactionFee); // set the transaction value to the entire balance, less the transaction fee\n\n\n        console.log(`Transacton`)\n        console.log(tx)\n        //const {web3} = this.state\n\n          const ethereum = await getEthereum()\n          const sentTx = await ethereum.request({\n            method: 'eth_sendTransaction',\n            params: [tx],\n          });\n    }\n\n    changeVyper = async (e) => {\n        const {accounts, vyperStorage, vyperInput} = this.state\n        e.preventDefault()\n        const value = parseInt(vyperInput)\n        if (isNaN(value)) {\n            alert(\"invalid value\")\n            return\n        }\n        await vyperStorage.methods.set(value).send({from: accounts[0]})\n            \n    }\n\n    changeSolidity = async (e) => {\n        const {accounts, solidityStorage, solidityInput} = this.state\n        e.preventDefault()\n        const value = parseInt(solidityInput)\n        if (isNaN(value)) {\n            alert(\"invalid value\")\n            return\n        }\n        await solidityStorage.methods.set(value).send({from: accounts[0]})\n            .on('receipt', async () => {\n                this.setState({\n                    solidityValue: await solidityStorage.methods.get().call()\n                })\n            })\n    }\n\n    handleChange(event) {\n        this.setState({value: event.target.value});\n      }\n\n    render() {\n        const {\n            web3, accounts, chainid,transactions,\n            solidityValue, solidityInput, ssbridge,ssbridgeEvents,events\n        } = this.state\n\n        if (!web3) {\n            return <div>Loading Web3, accounts, and contracts...</div>\n        }\n\n        // <=42 to exclude Kovan, <42 to include Kovan\n        if (isNaN(chainid) || chainid < 42) {\n            return <div>Wrong Network! Switch to your local RPC \"Localhost: 8545\" in your Web3 provider (e.g. Metamask)</div>\n        }\n\n        if (!ssbridge) {\n            return <div>Could not find a deployed contract. Check console for details.</div>\n        }\n\n        const isAccountsUnlocked = accounts ? accounts.length > 0 : false\n\n        const currencies  = useContext(GlobalContext).currencies\n\n        return (\n        <GlobalProvider>\n        <div className=\"App bg-light\">\n                <div className=\"container\">\n                <Header /><br/>\n                <button type=\"button\" className=\"btn float-start mt-1 btn-primary\">Connect to Wallet</button>\n                <button type=\"button\" className=\"btn float-end mt-1 btn-primary\">Connect to Wallet</button>\n                    <div className=\"py-5 text-center\">\n                        <h1>Cross Layer2 Bridge(Kovan) - Beta</h1>\n                        <h3>Source Rollup : Optimism - Destination Rollup : Optimism </h3>\n                    </div>\n                    <div className=\"row\">\n                        <Form currencies={this.currencies}/>\n                    </div>\n                    <hr className=\"mb-4\" />\n                    <div className=\"row\"> \n                        <Transactions transactions={transactions} currencies={this.currencies}/>\n                    </div>\n                </div>\n\n        </div>\n        </GlobalProvider>)\n    }\n}\n\nexport default App*/"]},"metadata":{},"sourceType":"module"}