{"ast":null,"code":"var _jsxFileName = \"/home/sherif/code/crypto/bridge/react/client/src/components/Form.js\";\nimport React, { useState, useContext } from \"react\";\nimport { GlobalContext } from '../context/GlobalState';\nimport { getEthereum } from \"../getEthereum\";\nimport { getWeb3 } from \"../getWeb3\";\nimport { getContract } from \"../getContract\";\n\nconst Form = () => {\n  const {\n    currencies\n  } = useContext(GlobalContext);\n  const [token, setToken] = useState(currencies[0].address);\n  const [amountInput, setAmount] = useState(0);\n  const [destinationInput, setDestination] = useState('');\n\n  let setWithdrawal = async e => {\n    e.preventDefault();\n    const value = parseInt(amountInput);\n    const ethereum = await getEthereum();\n    let ssbridge = await getContract();\n    const web3 = await getWeb3();\n    var gasPrice = await web3.eth.getGasPrice();\n    const accounts = await ethereum.request({\n      method: 'eth_requestAccounts'\n    });\n    let encodedABI = ssbridge.methods.withdraw(token, destinationInput, amountInput, 1, 10, 1).encodeABI();\n    let transactionFee = await ssbridge.methods.withdraw(token, destinationInput, amountInput, 1, 10, 1).estimateGas({\n      from: accounts[0]\n    }).then(result => console.log(result)).catch(error => console.error(error));\n    let estimateGas = await web3.eth.estimateGas({\n      \"value\": '0x0',\n      // Only tokens\n      \"data\": encodedABI,\n      \"from\": accounts[0],\n      \"to\": '0xD904b21D46603e2B6C606f401C412fE413DcAB74'\n    });\n    console.log(`encodedABItoken`);\n    console.log(token);\n    var tx = {\n      from: accounts[0],\n      to: \"0xD904b21D46603e2B6C606f401C412fE413DcAB74\",\n      data: encodedABI //gasPrice: gasPrice\n\n    }; //var gasLimit = 12000;\n    //var transactionFee = gasPrice * gasLimit; // calculate the transaction fee\n    //tx.gas = String(gasLimit);\n\n    if (token !== '0x0000000000000000000000000000000000000000') {\n      //tx.value = String(transactionFee); // set the transaction value to the entire balance, less the transaction fee\n      let minABI = [// transfer\n      {\n        \"constant\": false,\n        \"inputs\": [{\n          \"name\": \"_spender\",\n          \"type\": \"address\"\n        }, {\n          \"name\": \"_to\",\n          \"type\": \"uint256\"\n        }],\n        \"name\": \"transfer\",\n        \"outputs\": [{\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }],\n        \"type\": \"function\"\n      }, {\n        \"constant\": false,\n        \"inputs\": [{\n          \"name\": \"_spender\",\n          \"type\": \"address\"\n        }, {\n          \"name\": \"_value\",\n          \"type\": \"uint256\"\n        }],\n        \"name\": \"approve\",\n        \"outputs\": [{\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }],\n        \"type\": \"function\"\n      }]; // Get ERC20 Token contract instance\n\n      let tokenContract = new web3.eth.Contract(minABI, token);\n      await ethereum.request({\n        method: \"eth_sendTransaction\",\n        params: [{\n          from: accounts[0],\n          to: token,\n          data: tokenContract.methods.approve('0xD904b21D46603e2B6C606f401C412fE413DcAB74', value).encodeABI()\n        }]\n      }).then(result => console.log(result)).catch(error => console.error(error));\n    } else {\n      //tx.value = String(value + transactionFee); // set the transaction value to the entire balance, less the transaction fee\n\n      /*let transactionFee = web3.eth.estimateGas({\n        \"from\"      : accounts[0],       \n        \"to\"        : '0xD904b21D46603e2B6C606f401C412fE413DcAB74',     \n        \"data\"      : tx\n      })*/\n      tx.value = String(value + estimateGas); // set the transaction value to the entire balance, less the transaction fee\n    }\n\n    console.log(`Transacton`);\n    console.log(tx); //const {web3} = this.state\n    //const ethereum = await getEthereum()\n\n    const sentTx = await ethereum.request({\n      method: 'eth_sendTransaction',\n      params: [tx]\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    className: \"needs-validation p-3\",\n    onSubmit: e => setWithdrawal(e),\n    noValidate: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"Token\",\n    className: \"form-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 11\n    }\n  }, \"Token\"), /*#__PURE__*/React.createElement(\"select\", {\n    className: \"form-select\",\n    onChange: e => setToken(e.target.value),\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 11\n    }\n  }, currencies.map(currency => /*#__PURE__*/React.createElement(\"option\", {\n    key: currency.key,\n    value: currency.address,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 17\n    }\n  }, currency.name)))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"Amount\",\n    className: \"form-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 11\n    }\n  }, \"Amount\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    className: \"form-control\",\n    name: \"amountInput\",\n    placeholder: \"\",\n    value: amountInput,\n    onChange: e => setAmount(e.target.value),\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"Destination\",\n    className: \"form-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 11\n    }\n  }, \"Destination Address\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    className: \"form-control\",\n    name: \"destinationInput\",\n    placeholder: \"\",\n    value: destinationInput,\n    onChange: e => setDestination(e.target.value),\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"btn btn-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 8\n    }\n  }, \"Send\"));\n};\n\nexport default Form;","map":{"version":3,"sources":["/home/sherif/code/crypto/bridge/react/client/src/components/Form.js"],"names":["React","useState","useContext","GlobalContext","getEthereum","getWeb3","getContract","Form","currencies","token","setToken","address","amountInput","setAmount","destinationInput","setDestination","setWithdrawal","e","preventDefault","value","parseInt","ethereum","ssbridge","web3","gasPrice","eth","getGasPrice","accounts","request","method","encodedABI","methods","withdraw","encodeABI","transactionFee","estimateGas","from","then","result","console","log","catch","error","tx","to","data","minABI","tokenContract","Contract","params","approve","String","sentTx","target","map","currency","key","name"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from \"react\"\nimport {GlobalContext} from '../context/GlobalState';\nimport {getEthereum} from \"../getEthereum\"\nimport {getWeb3} from \"../getWeb3\"\nimport {getContract} from \"../getContract\"\n\nconst Form = () => {\n  const {currencies} = useContext(GlobalContext);\n  const [token, setToken] = useState(currencies[0].address);\n  const [amountInput, setAmount] = useState(0);\n  const [destinationInput, setDestination] = useState('');\n  \n  \n  let setWithdrawal = async (e) => {\n    e.preventDefault()\n    const value = parseInt(amountInput)\n    const ethereum = await getEthereum()\n    let ssbridge =  await getContract()\n    const web3 = await getWeb3()\n    var gasPrice = await web3.eth.getGasPrice();\n    \n    const accounts = await ethereum.request({ method: 'eth_requestAccounts' });\n\n    let encodedABI = ssbridge.methods.withdraw(token,\n    destinationInput, amountInput, 1, 10, 1).encodeABI()\n\n    let transactionFee = await ssbridge.methods.withdraw(token,\n      destinationInput, amountInput, 1, 10, 1).estimateGas({ from: accounts[0] }).then((result) =>  console.log(result))\n      .catch((error) => console.error(error));\n    \n      let estimateGas = await web3.eth.estimateGas({\n        \"value\": '0x0', // Only tokens\n        \"data\": encodedABI,\n        \"from\": accounts[0],\n        \"to\": '0xD904b21D46603e2B6C606f401C412fE413DcAB74'\n        });\n          \n    \n       console.log(`encodedABItoken`)\n       console.log(token)\n\n    var tx = {\n        from: accounts[0],\n        to: \"0xD904b21D46603e2B6C606f401C412fE413DcAB74\",\n        data: encodedABI,\n        //gasPrice: gasPrice\n    };\n    \n    \n    //var gasLimit = 12000;\n    //var transactionFee = gasPrice * gasLimit; // calculate the transaction fee\n\n    //tx.gas = String(gasLimit);\n    \n    if(token !== '0x0000000000000000000000000000000000000000'){\n      //tx.value = String(transactionFee); // set the transaction value to the entire balance, less the transaction fee\n      \n      let minABI = [\n        // transfer\n        {\n          \"constant\": false,\n          \"inputs\": [\n            {\n              \"name\": \"_spender\",\n              \"type\": \"address\"\n            },\n            {\n              \"name\": \"_to\",\n              \"type\": \"uint256\"\n            }\n          ],\n          \"name\": \"transfer\",\n          \"outputs\": [\n            {\n              \"name\": \"\",\n              \"type\": \"bool\"\n            }\n          ],\n          \"type\": \"function\"\n        },{\n          \"constant\": false,\n          \"inputs\": [\n            {\n              \"name\": \"_spender\",\n              \"type\": \"address\"\n            },\n            {\n              \"name\": \"_value\",\n              \"type\": \"uint256\"\n            }\n          ],\n          \"name\": \"approve\",\n          \"outputs\": [\n            {\n              \"name\": \"\",\n              \"type\": \"bool\"\n            }\n          ],\n          \"type\": \"function\"\n        }\n      ];\n      \n      // Get ERC20 Token contract instance\n      let tokenContract = new web3.eth.Contract(minABI, token);\n\n      await ethereum\n      .request({\n        method: \"eth_sendTransaction\",\n        params: [\n          {\n            from: accounts[0],\n            to: token,\n            data: tokenContract.methods\n              .approve('0xD904b21D46603e2B6C606f401C412fE413DcAB74', value)\n              .encodeABI(),\n          },\n        ],\n      })\n      .then((result) =>  console.log(result))\n      .catch((error) => console.error(error));\n    }else {\n      //tx.value = String(value + transactionFee); // set the transaction value to the entire balance, less the transaction fee\n      /*let transactionFee = web3.eth.estimateGas({\n        \"from\"      : accounts[0],       \n        \"to\"        : '0xD904b21D46603e2B6C606f401C412fE413DcAB74',     \n        \"data\"      : tx\n      })*/\n\n      tx.value = String(value + estimateGas); // set the transaction value to the entire balance, less the transaction fee\n    }\n\n\n    console.log(`Transacton`)\n    console.log(tx)\n    //const {web3} = this.state\n\n      //const ethereum = await getEthereum()\n      const sentTx = await ethereum.request({\n        method: 'eth_sendTransaction',\n        params: [tx],\n      }); \n    \n}\n\n  return (\n    <form className=\"needs-validation p-3\" onSubmit={(e) => setWithdrawal(e)} noValidate>\n      <div className=\"mb-3\">\n          <label htmlFor=\"Token\" className=\"form-label\">Token</label>\n          <select className=\"form-select\" onChange={(e) => setToken(e.target.value)} required>\n          {currencies.map((currency)=>(\n                <option key={currency.key} value={currency.address}>{currency.name}</option>\n            ))}\n          </select>\n       </div>\n       <div className=\"mb-3\">\n          <label htmlFor=\"Amount\" className=\"form-label\">Amount</label>\n          <input type=\"text\" className=\"form-control\" name=\"amountInput\" placeholder=\"\" value={amountInput}\n          onChange={(e) => setAmount(e.target.value)} required/>\n       </div>\n       <div className=\"mb-3\">\n          <label htmlFor=\"Destination\" className=\"form-label\">Destination Address</label>\n          <input type=\"text\" className=\"form-control\"  name=\"destinationInput\" placeholder=\"\" value={destinationInput}\n          onChange={(e) => setDestination(e.target.value)} required/>\n       </div>\n       <button type=\"submit\" className=\"btn btn-primary\">Send</button>\n    </form>\n  )\n}\n\nexport default Form\n"]},"metadata":{},"sourceType":"module"}