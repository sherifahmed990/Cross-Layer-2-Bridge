{"ast":null,"code":"var _jsxFileName = \"/home/sherif/code/crypto/bridge/react/client/src/components/Form.js\";\nimport React, { useState, useContext } from \"react\";\nimport { GlobalContext } from '../context/GlobalState';\nimport { getEthereum } from \"../getEthereum\";\nimport { getWeb3 } from \"../getWeb3\";\n\nconst Form = () => {\n  const [token, setToken] = useState('');\n  const [amountInput, setAmount] = useState(0);\n  const [destinationInput, setDestination] = useState('');\n  const {\n    currencies\n  } = useContext(GlobalContext);\n\n  let loadContract = async (chain, contractName, address) => {\n    // Load a deployed contract instance into a web3 contract object\n    const web3 = await getWeb3(); // Load the artifact with the specified address\n\n    let contractArtifact;\n\n    try {\n      contractArtifact = await import(`../artifacts/deployments/${chain}/${address}.json`);\n    } catch (e) {\n      console.log(`Failed to load contract artifact \"../artifacts/deployments/${chain}/${address}.json\"`);\n      return undefined;\n    }\n\n    return new web3.eth.Contract(contractArtifact.abi, address);\n  };\n\n  let setWithdrawal = async e => {\n    e.preventDefault();\n    const value = parseInt(amountInput);\n\n    if (isNaN(value)) {\n      alert(\"invalid value\");\n      return;\n    }\n\n    const web3 = await getWeb3(); // Try and enable accounts (connect metamask)\n\n    const ethereum = await getEthereum();\n\n    try {\n      //const ethereum = await getEthereum()\n      ethereum.enable();\n      console.log(`Metamask 2`);\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts'\n      }); // Get the current chain id\n\n      const chainid = parseInt((await web3.eth.getChainId())); // <=42 to exclude Kovan, <42 to include kovan\n\n      if (chainid < 42) {\n        // Wrong Network!\n        return;\n      }\n\n      console.log(chainid);\n      var _chainID = 0;\n\n      if (chainid === 42) {\n        _chainID = 42;\n      }\n\n      if (chainid === 1337) {\n        _chainID = \"dev\";\n      }\n\n      console.log(_chainID);\n      const ssbridge = await loadContract(_chainID, \"SourceDomainSideBridge\", \"0xD904b21D46603e2B6C606f401C412fE413DcAB74\");\n      let root = await ssbridge.methods.get_deposit_root().call();\n\n      if (!ssbridge) {\n        return;\n      }\n\n      var gasPrice = await web3.eth.getGasPrice();\n      let encodedABI = ssbridge.methods.withdraw(currencyInput, destinationInput, amountInput, 1, 10, 1).encodeABI();\n      var tx = {\n        from: accounts[0],\n        to: \"0xD904b21D46603e2B6C606f401C412fE413DcAB74\",\n        data: encodedABI,\n        gasPrice: gasPrice\n      };\n      var gasLimit = 12000;\n      var transactionFee = gasPrice * gasLimit; // calculate the transaction fee\n\n      tx.gas = String(gasLimit);\n      tx.value = String(value + transactionFee); // set the transaction value to the entire balance, less the transaction fee\n\n      console.log(`Transacton`);\n      console.log(tx); //const {web3} = this.state\n\n      const ethereum = await getEthereum();\n      const sentTx = await ethereum.request({\n        method: 'eth_sendTransaction',\n        params: [tx]\n      });\n    } catch (e) {\n      console.log(`Could not enable accounts. Interaction with contracts not available.\n        Use a modern browser with a Web3 plugin to fix this issue.`);\n      console.log(e);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    className: \"needs-validation p-3\",\n    onSubmit: e => setWithdrawal(e),\n    noValidate: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"Token\",\n    className: \"form-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  }, \"Token\"), /*#__PURE__*/React.createElement(\"select\", {\n    className: \"form-select\",\n    onChange: e => setToken(e.target.value),\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }\n  }, currencies.map(currency => /*#__PURE__*/React.createElement(\"option\", {\n    key: currency.key,\n    value: currency.address,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 17\n    }\n  }, currency.name)))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"Amount\",\n    className: \"form-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 11\n    }\n  }, \"Amount\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    className: \"form-control\",\n    name: \"amountInput\",\n    placeholder: \"\",\n    value: amountInput,\n    onChange: e => setAmount(target.value),\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"Destination\",\n    className: \"form-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 11\n    }\n  }, \"Destination Address\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    className: \"form-control\",\n    name: \"destinationInput\",\n    placeholder: \"\",\n    value: destination,\n    onChange: e => setDestination(e.target.value),\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"btn btn-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 8\n    }\n  }, \"Send\"));\n};\n\nexport default Form;","map":{"version":3,"sources":["/home/sherif/code/crypto/bridge/react/client/src/components/Form.js"],"names":["React","useState","useContext","GlobalContext","getEthereum","getWeb3","Form","token","setToken","amountInput","setAmount","destinationInput","setDestination","currencies","loadContract","chain","contractName","address","web3","contractArtifact","e","console","log","undefined","eth","Contract","abi","setWithdrawal","preventDefault","value","parseInt","isNaN","alert","ethereum","enable","accounts","request","method","chainid","getChainId","_chainID","ssbridge","root","methods","get_deposit_root","call","gasPrice","getGasPrice","encodedABI","withdraw","currencyInput","encodeABI","tx","from","to","data","gasLimit","transactionFee","gas","String","sentTx","params","target","map","currency","key","name","destination"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from \"react\"\nimport {GlobalContext} from '../context/GlobalState';\nimport {getEthereum} from \"../getEthereum\"\nimport {getWeb3} from \"../getWeb3\"\n\nconst Form = () => {\n  const [token, setToken] = useState('');\n  const [amountInput, setAmount] = useState(0);\n  const [destinationInput, setDestination] = useState('');\n  const {currencies} = useContext(GlobalContext);\n\n  let loadContract = async (chain, contractName, address) => {\n    // Load a deployed contract instance into a web3 contract object\n    const web3 = await getWeb3()\n\n    // Load the artifact with the specified address\n    let contractArtifact\n    try {\n        contractArtifact = await import(`../artifacts/deployments/${chain}/${address}.json`)\n    } catch (e) {\n        console.log(`Failed to load contract artifact \"../artifacts/deployments/${chain}/${address}.json\"`)\n        return undefined\n    }\n\n    return new web3.eth.Contract(contractArtifact.abi, address)\n}\n\n  let setWithdrawal = async (e) => {\n    e.preventDefault()\n    const value = parseInt(amountInput)\n    if (isNaN(value)) {\n        alert(\"invalid value\")\n        return\n    }\n    const web3 = await getWeb3()\n     // Try and enable accounts (connect metamask)\n     const ethereum = await getEthereum()\n     try {\n         //const ethereum = await getEthereum()\n         ethereum.enable()\n         console.log(`Metamask 2`)\n         \n         const accounts = await ethereum.request({ method: 'eth_requestAccounts' });\n         \n         // Get the current chain id\n         const chainid = parseInt(await web3.eth.getChainId())\n \n         // <=42 to exclude Kovan, <42 to include kovan\n         if (chainid < 42) {\n           // Wrong Network!\n           return\n         }\n       \n       console.log(chainid)\n       \n       var _chainID = 0;\n       if (chainid === 42){\n           _chainID = 42;\n       }\n       if (chainid === 1337){\n           _chainID = \"dev\"\n       }\n       console.log(_chainID)\n       const ssbridge = await loadContract(_chainID,\"SourceDomainSideBridge\", \"0xD904b21D46603e2B6C606f401C412fE413DcAB74\")\n       let root = await ssbridge.methods.get_deposit_root().call()\n       if (!ssbridge) {\n           return\n       }\n     \n    var gasPrice = await web3.eth.getGasPrice();\n\n    let encodedABI = ssbridge.methods.withdraw(currencyInput,\n    destinationInput, amountInput,\n       1, 10, 1).encodeABI()\n    var tx = {\n        from: accounts[0],\n        to: \"0xD904b21D46603e2B6C606f401C412fE413DcAB74\",\n        data: encodedABI,\n        gasPrice: gasPrice\n    };\n    \n    var gasLimit = 12000;\n    var transactionFee = gasPrice * gasLimit; // calculate the transaction fee\n\n    tx.gas = String(gasLimit);\n    tx.value = String(value + transactionFee); // set the transaction value to the entire balance, less the transaction fee\n\n\n    console.log(`Transacton`)\n    console.log(tx)\n    //const {web3} = this.state\n\n      const ethereum = await getEthereum()\n      const sentTx = await ethereum.request({\n        method: 'eth_sendTransaction',\n        params: [tx],\n      }); \n    }catch (e) {\n        console.log(`Could not enable accounts. Interaction with contracts not available.\n        Use a modern browser with a Web3 plugin to fix this issue.`)\n        console.log(e)\n    }\n}\n\n  return (\n    <form className=\"needs-validation p-3\" onSubmit={(e) => setWithdrawal(e)} noValidate>\n      <div className=\"mb-3\">\n          <label htmlFor=\"Token\" className=\"form-label\">Token</label>\n          <select className=\"form-select\" onChange={(e) => setToken(e.target.value)} required>\n          {currencies.map((currency)=>(\n                <option key={currency.key} value={currency.address}>{currency.name}</option>\n            ))}\n          </select>\n       </div>\n       <div className=\"mb-3\">\n          <label htmlFor=\"Amount\" className=\"form-label\">Amount</label>\n          <input type=\"text\" className=\"form-control\" name=\"amountInput\" placeholder=\"\" value={amountInput}\n          onChange={(e) => setAmount(target.value)} required/>\n       </div>\n       <div className=\"mb-3\">\n          <label htmlFor=\"Destination\" className=\"form-label\">Destination Address</label>\n          <input type=\"text\" className=\"form-control\"  name=\"destinationInput\" placeholder=\"\" value={destination}\n          onChange={(e) => setDestination(e.target.value)} required/>\n       </div>\n       <button type=\"submit\" className=\"btn btn-primary\">Send</button>\n    </form>\n  )\n}\n\nexport default Form\n"]},"metadata":{},"sourceType":"module"}