{"ast":null,"code":"var _jsxFileName = \"/home/sherif/code/crypto/bridge/react/client/src/components/Transactions.js\";\nimport React, { useState, useContext, useEffect } from \"react\";\nimport '../../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport { getWeb3 } from \"../getWeb3\";\nimport map from \"../artifacts/deployments/map.json\";\nimport { getEthereum } from \"../getEthereum\";\nimport { GlobalContext } from '../context/GlobalState';\n\nconst Transactions = () => {\n  const [transactions, setTransactions] = useState([]);\n  const {\n    currencies\n  } = useContext(GlobalContext);\n  useEffect(() => {\n    let loadContract = async (chain, contractName, address) => {\n      // Load a deployed contract instance into a web3 contract object\n      const web3 = await getWeb3();\n      /*\n      // Get the address of the most recent deployment from the deployment map\n      let address\n      try {\n          address = map[chain][contractName][0]\n      } catch (e) {\n          console.log(`Couldn't find any deployed contract \"${contractName}\" on the chain \"${chain}\".`)\n          return undefined\n      }*/\n      // Load the artifact with the specified address\n\n      let contractArtifact;\n\n      try {\n        contractArtifact = await import(`../artifacts/deployments/${chain}/${address}.json`);\n      } catch (e) {\n        console.log(`Failed to load contract artifact \"../artifacts/deployments/${chain}/${address}.json\"`);\n        return undefined;\n      }\n\n      return new web3.eth.Contract(contractArtifact.abi, address);\n    };\n\n    async function fetchTransactions() {\n      const web3 = await getWeb3(); // Try and enable accounts (connect metamask)\n\n      const ethereum = await getEthereum();\n\n      try {\n        //const ethereum = await getEthereum()\n        ethereum.enable();\n        console.log(`Metamask 2`);\n        const accounts = await ethereum.request({\n          method: 'eth_requestAccounts'\n        }); // Get the current chain id\n\n        const chainid = parseInt((await web3.eth.getChainId())); // <=42 to exclude Kovan, <42 to include kovan\n\n        if (this.state.chainid < 42) {\n          // Wrong Network!\n          return;\n        }\n        /*\n        console.log(this.state.chainid)\n        \n        var _chainID = 0;\n        if (this.state.chainid === 42){\n            _chainID = 42;\n        }\n        if (this.state.chainid === 1337){\n            _chainID = \"dev\"\n        }\n        console.log(_chainID)\n        const ssbridge = await loadContract(_chainID,\"SourceDomainSideBridge\", \"0xD904b21D46603e2B6C606f401C412fE413DcAB74\")\n        let root = await ssbridge.methods.get_deposit_root().call()\n        if (!ssbridge) {\n            return\n        }\n        let events = await ssbridge.getPastEvents(\"allEvents\", { fromBlock: 1})\n        //const ssbridgeEvents = await ssbridge.getPastEvents(\"allEvents\", { fromBlock: 1}).then(console.log);\n        console.log(\"Events\")\n        console.log(events[0]['returnValues'])\n        console.log(root)\n        setTransactions(events)\n        */\n\n      } catch (e) {\n        console.log(`Could not enable accounts. Interaction with contracts not available.\n        Use a modern browser with a Web3 plugin to fix this issue.`);\n        console.log(e);\n      }\n    }\n\n    fetchTransactions();\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, \"Recent Transactions\"), /*#__PURE__*/React.createElement(\"table\", {\n    className: \"table table-striped\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    scope: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 17\n    }\n  }, \"Token\"), /*#__PURE__*/React.createElement(\"th\", {\n    scope: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }\n  }, \"Destination Address\"), /*#__PURE__*/React.createElement(\"th\", {\n    scope: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 17\n    }\n  }, \"Amount\"), /*#__PURE__*/React.createElement(\"th\", {\n    scope: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 17\n    }\n  }, \"Status\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }\n  }, transactions.map((transaction, index) => /*#__PURE__*/React.createElement(\"tr\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 19\n    }\n  }, GetCurrencyName(currencies, transaction), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 21\n    }\n  }, transaction[1]), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 21\n    }\n  }, transaction[2]), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 21\n    }\n  }, \"Pending Bounty\"))))));\n};\n\nfunction GetCurrencyName(currencies, transaction) {\n  return /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 5\n    }\n  }, currencies.find(currency => currency.address === transaction[0]).name);\n}\n\nexport default Transactions;","map":{"version":3,"sources":["/home/sherif/code/crypto/bridge/react/client/src/components/Transactions.js"],"names":["React","useState","useContext","useEffect","getWeb3","map","getEthereum","GlobalContext","Transactions","transactions","setTransactions","currencies","loadContract","chain","contractName","address","web3","contractArtifact","e","console","log","undefined","eth","Contract","abi","fetchTransactions","ethereum","enable","accounts","request","method","chainid","parseInt","getChainId","state","transaction","index","GetCurrencyName","find","currency","name"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAwBC,UAAxB,EAAmCC,SAAnC,QAAmD,OAAnD;AACA,OAAO,yDAAP;AACA,SAAQC,OAAR,QAAsB,YAAtB;AACA,OAAOC,GAAP,MAAgB,mCAAhB;AACA,SAAQC,WAAR,QAA0B,gBAA1B;AACA,SAAQC,aAAR,QAA4B,wBAA5B;;AAGA,MAAMC,YAAY,GAAI,MAAM;AAC1B,QAAK,CAACC,YAAD,EAAeC,eAAf,IAAkCT,QAAQ,CAAC,EAAD,CAA/C;AACA,QAAM;AAACU,IAAAA;AAAD,MAAeT,UAAU,CAACK,aAAD,CAA/B;AAGAJ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIS,YAAY,GAAG,OAAOC,KAAP,EAAcC,YAAd,EAA4BC,OAA5B,KAAwC;AACzD;AACA,YAAMC,IAAI,GAAG,MAAMZ,OAAO,EAA1B;AACA;;;;;;;;;AAUA;;AACA,UAAIa,gBAAJ;;AACA,UAAI;AACAA,QAAAA,gBAAgB,GAAG,MAAM,OAAQ,4BAA2BJ,KAAM,IAAGE,OAAQ,OAApD,CAAzB;AACH,OAFD,CAEE,OAAOG,CAAP,EAAU;AACRC,QAAAA,OAAO,CAACC,GAAR,CAAa,8DAA6DP,KAAM,IAAGE,OAAQ,QAA3F;AACA,eAAOM,SAAP;AACH;;AAED,aAAO,IAAIL,IAAI,CAACM,GAAL,CAASC,QAAb,CAAsBN,gBAAgB,CAACO,GAAvC,EAA4CT,OAA5C,CAAP;AACH,KAvBC;;AAyBA,mBAAeU,iBAAf,GAAkC;AAClC,YAAMT,IAAI,GAAG,MAAMZ,OAAO,EAA1B,CADkC,CAIlC;;AACA,YAAMsB,QAAQ,GAAG,MAAMpB,WAAW,EAAlC;;AACA,UAAI;AACA;AACAoB,QAAAA,QAAQ,CAACC,MAAT;AACAR,QAAAA,OAAO,CAACC,GAAR,CAAa,YAAb;AAEA,cAAMQ,QAAQ,GAAG,MAAMF,QAAQ,CAACG,OAAT,CAAiB;AAAEC,UAAAA,MAAM,EAAE;AAAV,SAAjB,CAAvB,CALA,CAOA;;AACA,cAAMC,OAAO,GAAGC,QAAQ,EAAC,MAAMhB,IAAI,CAACM,GAAL,CAASW,UAAT,EAAP,EAAxB,CARA,CAUA;;AACA,YAAI,KAAKC,KAAL,CAAWH,OAAX,GAAqB,EAAzB,EAA6B;AAC3B;AACA;AACD;AACH;;;;;;;;;;;;;;;;;;;;;;;;AAuBD,OAtCD,CAsCE,OAAOb,CAAP,EAAU;AACRC,QAAAA,OAAO,CAACC,GAAR,CAAa;mEAAb;AAEAD,QAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACH;AACF;;AACDO,IAAAA,iBAAiB;AAChB,GA7EQ,EA6EN,EA7EM,CAAT;AA+EA,sBAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADJ,eAGI;AAAO,IAAA,SAAS,EAAC,qBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAI,IAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,eAEE;AAAI,IAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAFF,eAGE;AAAI,IAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE;AAAI,IAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF,CADJ,CADF,eASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKhB,YAAY,CAACJ,GAAb,CAAiB,CAAC8B,WAAD,EAAaC,KAAb,kBACd;AAAI,IAAA,GAAG,EAAEA,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,eAAe,CAAC1B,UAAD,EAAYwB,WAAZ,CADlB,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKA,WAAW,CAAC,CAAD,CAAhB,CAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKA,WAAW,CAAC,CAAD,CAAhB,CAHF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAJF,CADH,CADL,CATF,CAHJ,CAFF;AA2BD,CA/GD;;AAiHA,SAASE,eAAT,CAAyB1B,UAAzB,EAAoCwB,WAApC,EAAiD;AAC/C,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKxB,UAAU,CAAC2B,IAAX,CAAgBC,QAAQ,IAAIA,QAAQ,CAACxB,OAAT,KAAqBoB,WAAW,CAAC,CAAD,CAA5D,EAAiEK,IAAtE,CADF;AAGD;;AAED,eAAehC,YAAf","sourcesContent":["import React, {useState,useContext,useEffect} from \"react\"\nimport '../../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport {getWeb3} from \"../getWeb3\"\nimport map from \"../artifacts/deployments/map.json\"\nimport {getEthereum} from \"../getEthereum\"\nimport {GlobalContext} from '../context/GlobalState';\n\n\nconst Transactions =  () => {\n  const[transactions, setTransactions] = useState([]);\n  const {currencies} = useContext(GlobalContext);\n\n\n  useEffect(() => {\n    let loadContract = async (chain, contractName, address) => {\n      // Load a deployed contract instance into a web3 contract object\n      const web3 = await getWeb3()\n      /*\n      // Get the address of the most recent deployment from the deployment map\n      let address\n      try {\n          address = map[chain][contractName][0]\n      } catch (e) {\n          console.log(`Couldn't find any deployed contract \"${contractName}\" on the chain \"${chain}\".`)\n          return undefined\n      }*/\n\n      // Load the artifact with the specified address\n      let contractArtifact\n      try {\n          contractArtifact = await import(`../artifacts/deployments/${chain}/${address}.json`)\n      } catch (e) {\n          console.log(`Failed to load contract artifact \"../artifacts/deployments/${chain}/${address}.json\"`)\n          return undefined\n      }\n\n      return new web3.eth.Contract(contractArtifact.abi, address)\n  }\n\n    async function fetchTransactions(){\n    const web3 = await getWeb3()\n    \n    \n    // Try and enable accounts (connect metamask)\n    const ethereum = await getEthereum()\n    try {\n        //const ethereum = await getEthereum()\n        ethereum.enable()\n        console.log(`Metamask 2`)\n        \n        const accounts = await ethereum.request({ method: 'eth_requestAccounts' });\n        \n        // Get the current chain id\n        const chainid = parseInt(await web3.eth.getChainId())\n\n        // <=42 to exclude Kovan, <42 to include kovan\n        if (this.state.chainid < 42) {\n          // Wrong Network!\n          return\n        }\n      /*\n      console.log(this.state.chainid)\n      \n      var _chainID = 0;\n      if (this.state.chainid === 42){\n          _chainID = 42;\n      }\n      if (this.state.chainid === 1337){\n          _chainID = \"dev\"\n      }\n      console.log(_chainID)\n      const ssbridge = await loadContract(_chainID,\"SourceDomainSideBridge\", \"0xD904b21D46603e2B6C606f401C412fE413DcAB74\")\n      let root = await ssbridge.methods.get_deposit_root().call()\n      if (!ssbridge) {\n          return\n      }\n      let events = await ssbridge.getPastEvents(\"allEvents\", { fromBlock: 1})\n      //const ssbridgeEvents = await ssbridge.getPastEvents(\"allEvents\", { fromBlock: 1}).then(console.log);\n      console.log(\"Events\")\n      console.log(events[0]['returnValues'])\n      console.log(root)\n      setTransactions(events)\n*/\n    } catch (e) {\n        console.log(`Could not enable accounts. Interaction with contracts not available.\n        Use a modern browser with a Web3 plugin to fix this issue.`)\n        console.log(e)\n    }\n  }\n  fetchTransactions()\n  }, [])\n\n  return (\n    \n    <div>\n        <h2>Recent Transactions</h2>\n\n        <table className=\"table table-striped\">\n          <thead>\n              <tr>\n                <th scope=\"col\">Token</th>\n                <th scope=\"col\">Destination Address</th>\n                <th scope=\"col\">Amount</th>\n                <th scope=\"col\">Status</th>\n              </tr>\n          </thead>\n          <tbody>\n              {transactions.map((transaction,index)=>(\n                  <tr key={index}>\n                    {GetCurrencyName(currencies,transaction)}\n                    <td>{transaction[1]}</td>\n                    <td>{transaction[2]}</td>\n                    <td>Pending Bounty</td>\n                  </tr>\n              ))}\n          </tbody>\n        </table>\n    </div>\n  )\n}\n\nfunction GetCurrencyName(currencies,transaction) {\n  return (\n    <td>{currencies.find(currency => currency.address === transaction[0]).name}</td>\n  );\n}\n\nexport default Transactions"]},"metadata":{},"sourceType":"module"}