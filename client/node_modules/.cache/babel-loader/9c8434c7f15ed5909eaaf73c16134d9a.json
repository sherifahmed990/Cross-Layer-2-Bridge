{"ast":null,"code":"var _jsxFileName = \"/home/sherif/code/crypto/bridge/react/client/src/components/Form.js\";\nimport React, { useState, useContext } from \"react\";\nimport { GlobalContext } from '../context/GlobalState';\n\nconst Form = () => {\n  const [token, setToken] = useState('');\n  const [amount, setAmount] = useState(0);\n  const [destination, setDestination] = useState('');\n  const {\n    currencies\n  } = useContext(GlobalContext);\n\n  setWithdrawal = async e => {\n    const {\n      accounts,\n      amountInput,\n      destinationInput,\n      currencyInput,\n      ssbridge\n    } = this.state;\n    e.preventDefault();\n    const value = parseInt(amountInput);\n\n    if (isNaN(value)) {\n      alert(\"invalid value\");\n      return;\n    }\n\n    const {\n      web3\n    } = this.state;\n    var gasPrice = await web3.eth.getGasPrice();\n    let encodedABI = ssbridge.methods.withdraw(currencyInput, destinationInput, amountInput, 1, 10, 1).encodeABI();\n    var tx = {\n      from: accounts[0],\n      to: \"0xD904b21D46603e2B6C606f401C412fE413DcAB74\",\n      data: encodedABI,\n      gasPrice: gasPrice\n    };\n    /*\n    var gasLimit =   web3.eth.estimateGas(tx); // estimate the gas limit for this transaction\n    let gasLimitvalue\n    await gasLimit.then(function(result){\n        // business logic with result\n        gasLimitvalue = result\n        console.log(`Gas liimit success`)\n    }).catch(function(e){\n        //error handling logic\n        console.log(`Gas liimit fail`)\n        console.log(e)\n    });*/\n\n    var gasLimit = 12000;\n    var transactionFee = gasPrice * gasLimit; // calculate the transaction fee\n\n    tx.gas = String(gasLimit);\n    tx.value = String(value + transactionFee); // set the transaction value to the entire balance, less the transaction fee\n\n    console.log(`Transacton`);\n    console.log(tx); //const {web3} = this.state\n\n    const ethereum = await getEthereum();\n    const sentTx = await ethereum.request({\n      method: 'eth_sendTransaction',\n      params: [tx]\n    });\n    /*\n    sentTx.on(\"receipt\", receipt => {\n      // do something when receipt comes back\n      console.log(`We did it!!!`)\n      console.log(receipt)\n    });\n    sentTx.on(\"error\", err => {\n      // do something on transaction error\n      console.log(`We failed.`)\n      console.log(err)\n    });*/\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    className: \"needs-validation p-3\",\n    onSubmit: e => this.setWithdrawal(e),\n    noValidate: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"Token\",\n    className: \"form-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }, \"Token\"), /*#__PURE__*/React.createElement(\"select\", {\n    className: \"form-select\",\n    onChange: e => setToken(e.target.value),\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  }, currencies.map(currency => /*#__PURE__*/React.createElement(\"option\", {\n    key: currency.key,\n    value: currency.address,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }\n  }, currency.name)))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"Amount\",\n    className: \"form-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  }, \"Amount\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    className: \"form-control\",\n    name: \"amountInput\",\n    placeholder: \"\",\n    value: amount,\n    onChange: e => setAmount(e.target.value),\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"Destination\",\n    className: \"form-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }, \"Destination Address\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    className: \"form-control\",\n    name: \"destinationInput\",\n    placeholder: \"\",\n    value: destination,\n    onChange: e => setDestination(e.target.value),\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"btn btn-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 8\n    }\n  }, \"Send\"));\n};\n\nexport default Form;","map":{"version":3,"sources":["/home/sherif/code/crypto/bridge/react/client/src/components/Form.js"],"names":["React","useState","useContext","GlobalContext","Form","token","setToken","amount","setAmount","destination","setDestination","currencies","setWithdrawal","e","accounts","amountInput","destinationInput","currencyInput","ssbridge","state","preventDefault","value","parseInt","isNaN","alert","web3","gasPrice","eth","getGasPrice","encodedABI","methods","withdraw","encodeABI","tx","from","to","data","gasLimit","transactionFee","gas","String","console","log","ethereum","getEthereum","sentTx","request","method","params","target","map","currency","key","address","name"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from \"react\"\nimport {GlobalContext} from '../context/GlobalState';\n\nconst Form = () => {\n  const [token, setToken] = useState('');\n  const [amount, setAmount] = useState(0);\n  const [destination, setDestination] = useState('');\n  const {currencies} = useContext(GlobalContext);\n\n  setWithdrawal = async (e) => {\n    const {accounts, amountInput, destinationInput, currencyInput, \n        ssbridge} = this.state\n    e.preventDefault()\n    const value = parseInt(amountInput)\n    if (isNaN(value)) {\n        alert(\"invalid value\")\n        return\n    }\n    const {web3} = this.state\n    var gasPrice = await web3.eth.getGasPrice();\n\n    let encodedABI = ssbridge.methods.withdraw(currencyInput,\n    destinationInput, amountInput,\n       1, 10, 1).encodeABI()\n    var tx = {\n        from: accounts[0],\n        to: \"0xD904b21D46603e2B6C606f401C412fE413DcAB74\",\n        data: encodedABI,\n        gasPrice: gasPrice\n    };\n    /*\n    var gasLimit =   web3.eth.estimateGas(tx); // estimate the gas limit for this transaction\n    let gasLimitvalue\n    await gasLimit.then(function(result){\n        // business logic with result\n        gasLimitvalue = result\n        console.log(`Gas liimit success`)\n    }).catch(function(e){\n        //error handling logic\n        console.log(`Gas liimit fail`)\n        console.log(e)\n    });*/\n    var gasLimit = 12000;\n    var transactionFee = gasPrice * gasLimit; // calculate the transaction fee\n\n    tx.gas = String(gasLimit);\n    tx.value = String(value + transactionFee); // set the transaction value to the entire balance, less the transaction fee\n\n\n    console.log(`Transacton`)\n    console.log(tx)\n    //const {web3} = this.state\n\n      const ethereum = await getEthereum()\n      const sentTx = await ethereum.request({\n        method: 'eth_sendTransaction',\n        params: [tx],\n      });\n      /*\n      sentTx.on(\"receipt\", receipt => {\n        // do something when receipt comes back\n        console.log(`We did it!!!`)\n        console.log(receipt)\n      });\n      sentTx.on(\"error\", err => {\n        // do something on transaction error\n        console.log(`We failed.`)\n        console.log(err)\n      });*/\n}\n\n  return (\n    <form className=\"needs-validation p-3\" onSubmit={(e) => this.setWithdrawal(e)} noValidate>\n      <div className=\"mb-3\">\n          <label htmlFor=\"Token\" className=\"form-label\">Token</label>\n          <select className=\"form-select\" onChange={(e) => setToken(e.target.value)} required>\n          {currencies.map((currency)=>(\n                <option key={currency.key} value={currency.address}>{currency.name}</option>\n            ))}\n          </select>\n       </div>\n       <div className=\"mb-3\">\n          <label htmlFor=\"Amount\" className=\"form-label\">Amount</label>\n          <input type=\"text\" className=\"form-control\" name=\"amountInput\" placeholder=\"\" value={amount}\n          onChange={(e) => setAmount(e.target.value)} required/>\n       </div>\n       <div className=\"mb-3\">\n          <label htmlFor=\"Destination\" className=\"form-label\">Destination Address</label>\n          <input type=\"text\" className=\"form-control\"  name=\"destinationInput\" placeholder=\"\" value={destination}\n          onChange={(e) => setDestination(e.target.value)} required/>\n       </div>\n       <button type=\"submit\" className=\"btn btn-primary\">Send</button>\n    </form>\n  )\n}\n\nexport default Form\n"]},"metadata":{},"sourceType":"module"}