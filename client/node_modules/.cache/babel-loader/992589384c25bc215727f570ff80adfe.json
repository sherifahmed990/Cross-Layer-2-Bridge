{"ast":null,"code":"var _jsxFileName = \"/home/sherif/code/crypto/bridge/react/client/src/components/SourceRollupBountyPanel.js\";\nimport React from \"react\";\nimport Tickets from \"./Tickets\";\n\nconst SourceRollupBountyPanel = () => {\n  let createTicket = async e => {\n    const ethereum = await getEthereum();\n    let ssbridge = await getContract();\n    const web3 = await getWeb3();\n    var gasPrice = await web3.eth.getGasPrice();\n    const accounts = await ethereum.request({\n      method: 'eth_requestAccounts'\n    });\n    let encodedABI = ssbridge.methods.createTicket().encodeABI();\n    console.log(`encodedABItoken`);\n    console.log(token);\n    var tx = {\n      from: accounts[0],\n      to: \"0xD904b21D46603e2B6C606f401C412fE413DcAB74\",\n      data: encodedABI,\n      gasPrice: gasPrice\n    };\n    var gasLimit = 12000;\n    var transactionFee = gasPrice * gasLimit; // calculate the transaction fee\n\n    tx.gas = String(gasLimit);\n    tx.value = String(value + transactionFee); // set the transaction value to the entire balance, less the transaction fee\n\n    console.log(`Transacton`);\n    console.log(tx); //const {web3} = this.state\n    //const ethereum = await getEthereum()\n\n    const sentTx = await ethereum.request({\n      method: 'eth_sendTransaction',\n      params: [tx]\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"btn btn-primary\",\n    onSubmit: createTicket,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, \"Create Ticket\"), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Tickets, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default SourceRollupBountyPanel;","map":{"version":3,"sources":["/home/sherif/code/crypto/bridge/react/client/src/components/SourceRollupBountyPanel.js"],"names":["React","Tickets","SourceRollupBountyPanel","createTicket","e","ethereum","getEthereum","ssbridge","getContract","web3","getWeb3","gasPrice","eth","getGasPrice","accounts","request","method","encodedABI","methods","encodeABI","console","log","token","tx","from","to","data","gasLimit","transactionFee","gas","String","value","sentTx","params"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,MAAMC,uBAAuB,GAAG,MAAM;AAElC,MAAIC,YAAY,GAAG,MAAOC,CAAP,IAAa;AAC5B,UAAMC,QAAQ,GAAG,MAAMC,WAAW,EAAlC;AACA,QAAIC,QAAQ,GAAI,MAAMC,WAAW,EAAjC;AACA,UAAMC,IAAI,GAAG,MAAMC,OAAO,EAA1B;AACA,QAAIC,QAAQ,GAAG,MAAMF,IAAI,CAACG,GAAL,CAASC,WAAT,EAArB;AAEA,UAAMC,QAAQ,GAAG,MAAMT,QAAQ,CAACU,OAAT,CAAiB;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAjB,CAAvB;AAEA,QAAIC,UAAU,GAAGV,QAAQ,CAACW,OAAT,CAAiBf,YAAjB,GAAgCgB,SAAhC,EAAjB;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAa,iBAAb;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AAEA,QAAIC,EAAE,GAAG;AACLC,MAAAA,IAAI,EAAEV,QAAQ,CAAC,CAAD,CADT;AAELW,MAAAA,EAAE,EAAE,4CAFC;AAGLC,MAAAA,IAAI,EAAET,UAHD;AAILN,MAAAA,QAAQ,EAAEA;AAJL,KAAT;AAQA,QAAIgB,QAAQ,GAAG,KAAf;AACA,QAAIC,cAAc,GAAGjB,QAAQ,GAAGgB,QAAhC,CAtB4B,CAsBc;;AAE1CJ,IAAAA,EAAE,CAACM,GAAH,GAASC,MAAM,CAACH,QAAD,CAAf;AAEAJ,IAAAA,EAAE,CAACQ,KAAH,GAAWD,MAAM,CAACC,KAAK,GAAGH,cAAT,CAAjB,CA1B4B,CA0Be;;AAE3CR,IAAAA,OAAO,CAACC,GAAR,CAAa,YAAb;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYE,EAAZ,EA7B4B,CA8B5B;AAEE;;AACA,UAAMS,MAAM,GAAG,MAAM3B,QAAQ,CAACU,OAAT,CAAiB;AACpCC,MAAAA,MAAM,EAAE,qBAD4B;AAEpCiB,MAAAA,MAAM,EAAE,CAACV,EAAD;AAF4B,KAAjB,CAArB;AAKL,GAtCD;;AAwCA,sBAAO,uDACH;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,SAAS,EAAC,iBAAhC;AAAkD,IAAA,QAAQ,EAAEpB,YAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADG,eAEH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFG,eAGH,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHG,CAAP;AAMH,CAhDD;;AAkDA,eAAeD,uBAAf","sourcesContent":["import React from \"react\"\nimport Tickets from \"./Tickets\";\n\nconst SourceRollupBountyPanel = () => {\n\n    let createTicket = async (e) => {\n        const ethereum = await getEthereum()\n        let ssbridge =  await getContract()\n        const web3 = await getWeb3()\n        var gasPrice = await web3.eth.getGasPrice();\n        \n        const accounts = await ethereum.request({ method: 'eth_requestAccounts' });\n    \n        let encodedABI = ssbridge.methods.createTicket().encodeABI()\n        \n        console.log(`encodedABItoken`)\n        console.log(token)\n    \n        var tx = {\n            from: accounts[0],\n            to: \"0xD904b21D46603e2B6C606f401C412fE413DcAB74\",\n            data: encodedABI,\n            gasPrice: gasPrice\n        };\n        \n        \n        var gasLimit = 12000;\n        var transactionFee = gasPrice * gasLimit; // calculate the transaction fee\n    \n        tx.gas = String(gasLimit);\n        \n        tx.value = String(value + transactionFee); // set the transaction value to the entire balance, less the transaction fee\n        \n        console.log(`Transacton`)\n        console.log(tx)\n        //const {web3} = this.state\n    \n          //const ethereum = await getEthereum()\n          const sentTx = await ethereum.request({\n            method: 'eth_sendTransaction',\n            params: [tx],\n          }); \n        \n    }\n\n    return(<>\n        <button type=\"submit\" className=\"btn btn-primary\" onSubmit={createTicket}>Create Ticket</button>\n        <hr/>\n        <Tickets />\n        </>\n    );\n}\n\nexport default SourceRollupBountyPanel"]},"metadata":{},"sourceType":"module"}