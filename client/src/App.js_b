import React, {Component} from "react"
import './App.css'
import {getWeb3} from "./getWeb3"
import map from "./artifacts/deployments/map.json"
import {getEthereum} from "./getEthereum"

class App extends Component {

    state = {
        web3: null,
        accounts: null,
        chainid: null,
        SourceDomainSideBridge:null,
        amountInput: 0,
        destinationInput: 0,
        /*
        vyperStorage: null,
        vyperValue: 0,
        vyperInput: 0,
        solidityStorage: null,
        solidityValue: 0,
        solidityInput: 0,*/
    }

    componentDidMount = async () => {

        // Get network provider and web3 instance.
        const web3 = await getWeb3()

        // Try and enable accounts (connect metamask)
        /*try {
            const ethereum = await getEthereum()
            ethereum.enable()
        } catch (e) {
            console.log(`Could not enable accounts. Interaction with contracts not available.
            Use a modern browser with a Web3 plugin to fix this issue.`)
            console.log(e)
        }*/

        // Use web3 to get the user's accounts
        //const accounts = await web3.eth.getAccounts()

        const ethereum = await getEthereum()
        try {
            //const ethereum = await getEthereum()
            ethereum.enable()
            console.log(`Metamask`)
        } catch (e) {
            console.log(`Could not enable accounts. Interaction with contracts not available.
            Use a modern browser with a Web3 plugin to fix this issue.`)
            console.log(e)
        }


        const accounts = await ethereum.request({ method: 'eth_requestAccounts' });

        // Get the current chain id
        const chainid = parseInt(await web3.eth.getChainId())

        this.setState({
            web3,
            accounts,
            chainid
        }, await this.loadInitialContracts)

    }

    loadInitialContracts = async () => {
        // <=42 to exclude Kovan, <42 to include kovan
        if (this.state.chainid < 42) {
            // Wrong Network!
            return
        }
        console.log(this.state.chainid)
        
        var _chainID = 0;
        if (this.state.chainid === 42){
            _chainID = 42;
        }
        if (this.state.chainid === 1337){
            _chainID = "dev"
        }
        console.log(_chainID)
        const ssbridge = await this.loadContract(_chainID,"SourceDomainSideBridge", "0xD904b21D46603e2B6C606f401C412fE413DcAB74")
        let root = await ssbridge.methods.get_deposit_root().call()
        if (!ssbridge) {
            return
        }
        let events = await ssbridge.getPastEvents("allEvents", { fromBlock: 1})
        //const ssbridgeEvents = await ssbridge.getPastEvents("allEvents", { fromBlock: 1}).then(console.log);
        console.log("Events")
        console.log(events[0]['returnValues'])
        console.log(root)
        
        //const solidityValue = await solidityStorage.methods.get().call()

        this.setState({
            ssbridge,
            //ssbridgeEvents,
        })

        /*
        const vyperStorage = await this.loadContract(_chainID,"VyperStorage")
        const solidityStorage = await this.loadContract(_chainID,"SolidityStorage")

        if (!vyperStorage || !solidityStorage) {
            return
        }

        const vyperValue = await vyperStorage.methods.get().call()
        const solidityValue = await solidityStorage.methods.get().call()

        this.setState({
            vyperStorage,
            vyperValue,
            solidityStorage,
            solidityValue,
        })*/
    }

    loadContract = async (chain, contractName, address) => {
        // Load a deployed contract instance into a web3 contract object
        const {web3} = this.state
        /*
        // Get the address of the most recent deployment from the deployment map
        let address
        try {
            address = map[chain][contractName][0]
        } catch (e) {
            console.log(`Couldn't find any deployed contract "${contractName}" on the chain "${chain}".`)
            return undefined
        }*/

        // Load the artifact with the specified address
        let contractArtifact
        try {
            contractArtifact = await import(`./artifacts/deployments/${chain}/${address}.json`)
        } catch (e) {
            console.log(`Failed to load contract artifact "./artifacts/deployments/${chain}/${address}.json"`)
            return undefined
        }

        return new web3.eth.Contract(contractArtifact.abi, address)
    }

    setWithdrawal = async (e) => {
        const {accounts, amountInput, destinationInput, ssbridge} = this.state
        e.preventDefault()
        const value = parseInt(amountInput)
        if (isNaN(value)) {
            alert("invalid value")
            return
        }
        /*const value2 = parseInt(amountInput)
        if (isNaN(value)) {
            alert("invalid value")
            return
        }*/

        let encodedABI = ssbridge.methods.withdraw("0x0000000000000000000000000000000000000000",
        destinationInput, amountInput,
           1, 10, 1).encodeABI()
        var tx = {
            from: accounts[0],
            to: "0xD904b21D46603e2B6C606f401C412fE413DcAB74",
            gas: 2000000,
            data: encodedABI,
        };
        console.log(`Transacton`)
        console.log(tx)
        const {web3} = this.state
        //const signPromise = web3.eth.accounts.signTransaction(tx, "b2357eb8cfe06de1e5e7ffb3c32bdba5625b17795f2c1612245abc88b5637fa0");

        const signPromise = web3.eth.signTransaction(tx, tx.from);

        signPromise.then((signedTx) => {
            // raw transaction string may be available in .raw or 
            // .rawTransaction depending on which signTransaction
            // function was called
            console.log(`Transacton`)
            console.log(signedTx.rawTransaction)
            const sentTx = web3.eth.sendSignedTransaction(signedTx.raw || signedTx.rawTransaction);
            sentTx.on("receipt", receipt => {
              // do something when receipt comes back
              console.log(`We did it!!!`)
              console.log(receipt)
            });
            sentTx.on("error", err => {
              // do something on transaction error
              console.log(err)
            });
          }).catch((err) => {
            // do something when promise fails
            console.log(`We failed bad!!!`)
          });
    }

    changeVyper = async (e) => {
        const {accounts, vyperStorage, vyperInput} = this.state
        e.preventDefault()
        const value = parseInt(vyperInput)
        if (isNaN(value)) {
            alert("invalid value")
            return
        }
        await vyperStorage.methods.set(value).send({from: accounts[0]})
            
    }

    changeSolidity = async (e) => {
        const {accounts, solidityStorage, solidityInput} = this.state
        e.preventDefault()
        const value = parseInt(solidityInput)
        if (isNaN(value)) {
            alert("invalid value")
            return
        }
        await solidityStorage.methods.set(value).send({from: accounts[0]})
            .on('receipt', async () => {
                this.setState({
                    solidityValue: await solidityStorage.methods.get().call()
                })
            })
    }

    handleChange(event) {
        this.setState({value: event.target.value});
      }

    render() {
        const {
            web3, accounts, chainid,
            solidityValue, solidityInput, ssbridge,ssbridgeEvents
        } = this.state

        if (!web3) {
            return <div>Loading Web3, accounts, and contracts...</div>
        }

        // <=42 to exclude Kovan, <42 to include Kovan
        if (isNaN(chainid) || chainid < 42) {
            return <div>Wrong Network! Switch to your local RPC "Localhost: 8545" in your Web3 provider (e.g. Metamask)</div>
        }

        if (!ssbridge) {
            return <div>Could not find a deployed contract. Check console for details.</div>
        }

        const isAccountsUnlocked = accounts ? accounts.length > 0 : false

        return (<div className="App">
            <h1>Cross Layer2 Bridge(Optimism-Optimism) - Beta</h1>
            <p>
                Send tokens between different rollups.
            </p>
            {
                !isAccountsUnlocked ?
                    <p><strong>Connect with Metamask and refresh the page to
                        be able to edit the storage fields.</strong>
                    </p>
                    : null
            }
            <h2>Vyper Storage Contract</h2>

            <br/>
            <form onSubmit={(e) => this.setWithdrawal(e)}>
                <div>
                    <label>Amount: </label>
                    <br/>
                    <input
                        name="amountInput"
                        type="text"
                        value={this.state.amountInput}
                        onChange={(e) => this.setState({amountInput: e.target.value})}
                    />
                    <br/>
                    <input
                        name="destinationInput"
                        type="text"
                        value={this.state.destinationInput}
                        onChange={(e) => this.setState({destinationInput: e.target.value})}
                    />
                    <br/>
                    <button type="submit"  disabled={!isAccountsUnlocked}>Submit</button>
                </div>
            </form>

            <h2>Solidity Storage Contract</h2>
            <div>The stored value is: {solidityValue}</div>
            <br/>
            <form onSubmit={(e) => this.changeSolidity(e)}>
                <div>
                    <label>Change the value to: </label>
                    <br/>
                    <input
                        name="solidityInput"
                        type="text"
                        value={solidityInput}
                        onChange={(e) => this.setState({solidityInput: e.target.value})}
                    />
                    <br/>
                    <button type="submit" disabled={!isAccountsUnlocked}>Submit</button>

                </div>
            </form>
        </div>)
    }
}

export default App
